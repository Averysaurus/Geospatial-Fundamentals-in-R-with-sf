sfhomes <- read.csv('data/sf_properties_25ksample.csv',
stringsAsFactors = FALSE)
setwd('..')
sfhomes <- read.csv('data/sf_properties_25ksample.csv',
stringsAsFactors = FALSE)
sfhomes15 <- subset(sfhomes, as.numeric(SalesYear) == 2015)
bart <- read.csv("./data/bart.csv")
sfhomes15 <- subset(sfhomes, as.numeric(SalesYear) == 2015)
landmarks <- read.csv("./data/landmarks.csv")
library(sf)
tracts = st_read(dsn = './data', layer = 'sftracts')
sfhomes15_sf = st_as_sf(sfhomes15, coords = c('lon', 'lat'), crs = 4326)
class(sfhomes15_sf)
class(sfhomes15_sf)
head(sfhomes15_sf)
tracts_lonlat = st_transform(tracts, crs = 4326)
tracts_lonlat
tracts
tracts_lonlat
View(tracts)
tracts_lonlat = st_transform(tracts, crs = st_crs(sfhomes15_sf))
st_crs(sfhomes15_sf)
st_crs(tracts_lonlat)
st_crs(sfhomes15_sf) == st_crs(tracts_lonlat)
st_crs(sfhomes15_sf) == st_crs(tracts_lonlat)
st_crs(sfhomes15_sf) == st_crs(tracts_lonlat)
ggplot() + geom_sf(data = tracts_lonlat) +
geom_sf(data = sfhomes15_sf, aes(col = totvalue))
library(ggplot2)
ggplot() + geom_sf(data = tracts_lonlat) +
geom_sf(data = sfhomes15_sf, aes(col = totvalue))
landmarks_sf = st_as_sf(landmarks, coords = c("X", "Y"), crs= 3857)
sfboundary = st_read('./data', 'sfboundary')
sfhighways = st_read('./data', 'sfhighways')
st_crs(sfhomes15_sf) == st_crs(sfhighways)
st_crs(sfhomes15_sf) == st_crs(sfboundary)
st_transform(sfhighways, st_crs(sfhomes15_sf))
st_transform(sfhighways, st_crs(sfhomes15_sf)) -> sfhighways_sf
landmarks_lonlat = st_transform(landmarks_sf, st_crs(sfhomes15_sf))
#it needs to be transformed
sfhighways_lonlat = st_transform(sfhighways, st_crs(sfhomes15_sf))
challenge_map = ggplot() +
geom_sf(data = sfboundary, col = 'purple') +
geom_sf(data = tracts_lonlat, alpha = 0.2) +  #alpha = 0.2 for transparency, so we can see sfboundary
geom_sf(data= sfhighways_lonlat, col = 'red') +
geom_sf(data = sfhomes15_sf, aes(col = totvalue)) +
geom_sf(data = landmarks_sf, col = 'red')
challenge_map
library(ggmap)
#Hidden code for reading in Drew's API key, to knit on his machine
filename = '/home/drew/Desktop/gmapi.txt'
register_google(gsub('\n', '', readChar(filename, file.info(filename)$size)))
#prep our names for geocoding with the Google Maps API
place_names = paste0(landmarks$name, ',  San Francisco, CA')
#prep our names for geocoding with the Google Maps API
place_names = paste0(landmarks_sf$name, ',  San Francisco, CA')
#prep our names for geocoding with the Google Maps API
place_names = paste0(landmarks$name, ',  San Francisco, CA')
place_names
#geocode them
geocode_coords = geocode(place_names)
#transformed coords
landmarks_lonlat
#geocoded coords
geocode_coords
#geocoded coords
cbind(geocode_coords$lon, geocode_coords$lat)
library(tmap)
qtm(sfhomes15_sf)
tmap_mode("view") # set tmap to interactive view mode
qtm(sfhomes15_sf) # Interactive - click on the points
tm_shape(tracts) +
tm_polygons(col="beige", border.col="red", alpha=0.5)
tm_shape(sfhomes15_sf) +
tm_dots(col="totvalue", size=.25)
# Map the SF Boundary first
overlay_map = tm_shape(sfboundary) +
tm_polygons(col="beige", border.col="black") +
# Overlay the highway lines next
tm_shape(sfhighways_lonlat) +
tm_lines(col="black") +
# Then add the house points
tm_shape(sfhomes15_sf) +
tm_dots(col="totvalue", size=.25)
overlay_map
ttm()
overlay_map
overlay_map +
tm_shape(landmarks_lonlat) +
tm_dots(col = 'skyblue', size = 2)
overlay_map +
tm_shape(landmarks_lonlat) +
tm_dots(col = 'skyblue', size = 2)
tm_shape(sfboundary) +
tm_polygons(col="beige", border.col="black") +
tm_shape(sfhighways_lonlat) +
tm_lines(col="black") +
tm_shape(sfhomes15_sf) +
tm_dots(col="totvalue", size=.25,
title = "San Francisco Property Values (2015)") +
tm_layout(inner.margins=c(.05, .2, .15, .05))
tm_shape(sfboundary) +
tm_polygons(col="beige", border.col="black") +
tm_shape(sfhighways_lonlat) +
tm_lines(col="black") +
tm_shape(sfhomes15_sf) +
tm_dots(col="totvalue", size=.25,
title = "San Francisco Property Values (2015)") +
tm_layout(inner.margins=c(.05, .2, .15, .05))
tm_shape(sfboundary) +
tm_polygons(col="beige", border.col="black") +
tm_shape(sfhighways_lonlat) +
tm_lines(col="black") +
tm_shape(sfhomes15_sf) +
tm_dots(col="totvalue", size=.05,
title = "San Francisco Property Values (2015)",
popup.vars=c("SalesYear","totvalue","NumBedrooms",
"NumBathrooms","AreaSquareFeet")) +
tm_layout(inner.margins=c(.05, .2, .15, .05)) # bottom, left, top, right
ttm()
tm_shape(sfboundary) +
tm_polygons(col="beige", border.col="black") +
tm_shape(sfhighways_lonlat) +
tm_lines(col="black") +
tm_shape(sfhomes15_sf) +
tm_dots(col="totvalue", size=.05,
title = "San Francisco Property Values (2015)",
popup.vars=c("SalesYear","totvalue","NumBedrooms",
"NumBathrooms","AreaSquareFeet")) +
tm_layout(inner.margins=c(.05, .2, .15, .05)) # bottom, left, top, right
tm_basemap("Stamen.Watercolor") +
tm_shape(sfhomes15_sf) +
tm_dots(col="totvalue", size=.05, title = "San Francisco Property Values (2015)") +
tm_tiles("Stamen.TonerLabels")
sf::as_Spatial(tracts)
st_as_as(sf::as_Spatial(tracts))
st_as_sf(sf::as_Spatial(tracts))
# Read in from CSV file
sfhomes <- read.csv('data/sf_properties_25ksample.csv',
stringsAsFactors = FALSE)
# subset the data
sfhomes15 <- subset(sfhomes, as.numeric(SalesYear) == 2015)
# coerce to an `sf` object
sfhomes15_sf <- st_as_sf(sfhomes15, coords = c('lon', 'lat'),
crs = 4326)
# Read in the Bart data from CSV file
bart <- read.csv("./data/bart.csv", stringsAsFactors = F)
sfboundary <- st_read('./data', 'sfboundary')
sfhighways = st_read('./data', 'sfhighways')
#highways are already in 26910!
st_crs(sfhighways)
#highways are already in 26910!
st_crs(sfhighways)
#so we can use them as the target CRS
sfhomes15_utm <- st_transform(sfhomes15_sf, st_crs(sfhighways))
# Check the CRS
st_crs(sfboundary) == st_crs(sfhomes15_utm)
# Transform
sfboundary_utm <- st_transform(sfboundary, st_crs(sfhomes15_utm))
# Check again
st_crs(sfboundary_utm) == st_crs(sfhomes15_utm)
# coerce to `sf`
bart_sf = st_as_sf(bart, coords = c('X', 'Y'), crs = 4326)
# transform to UTM
bart_utm <- st_transform(bart_sf, st_crs(sfhomes15_utm))
st_crs(bart_utm)$epsg
st_crs(sfboundary_utm)$epsg
st_crs(sfhighways)$epsg
st_crs(sfhomes15_utm)$epsg
str(st_crs(sfhomes15_utm))
st_crs(sfhomes15_utm)$proj4string
plot(sfboundary_utm)
lines(sfhighways, col='purple', lwd=4)
points(sfhomes15_utm)
plot(bart_utm, col="red", pch=15, add=T)
plot(st_geometry(sfboundary_utm))
plot(st_geometry(sfhighways), col='purple', lwd=4, add = T)
plot(st_geometry(sfhomes15_utm), add = T, pch = 19, cex = 0.5)
plot(st_geometry(bart_utm), col="skyblue", pch=19, cex = 1, add=T)
challenge_map = tm_shape(sfboundary) +
tm_polygons() +
tm_shape(sfhighways) +
tm_lines(col = 'purple', lwd = 4) +
tm_shape(sfhomes15_sf) +
tm_dots(col = 'black', size = 0.5) +
tm_shape(bart_utm) +
tm_dots(col = 'skyblue', size = 1)
challenge_map
ttm()
challenge_map
sf_area = st_area(sfboundary_utm)
sf_area
class(sf_area)
class(sf_area)
typeof(sf_area)
library(units)
set_units(sf_area, km^2)
set_units(sf_area, km^3)
set_units(sf_area, km*2)
set_units(sf_area, sqkm)
valid_udunits()
st_area(sfboundary)
st_length(sfhighways)
length(st_length(sfhighways))
nrow(sfhighways)
st_length(sfhighways)
sum(st_length(sfhighways))
set_units(sum(st_length(sfhighways)), km)
st_length(sfhighways) %>% sum
st_length(sfhighways) %>% sum %>% set_units(km)
bart_utm
bart_utm$STATION
bart_utm$STATION == 'EMBARCADERO'
bart_utm[bart_utm$STATION == 'EMBARCADERO', 'STATION']
bart_utm[bart_utm$STATION == 'EMBARCADERO',]
bart_utm[bart_utm$STATION == 'POWELL STREET',]
emb_pow_dist = st_distance(bart_utm[bart_utm$STATION == 'EMBARCADERO',],
bart_utm[bart_utm$STATION == 'POWELL STREET',])
emb_pow_dist = set_units(emb_pow_dist, km)
emb_pow_dist
emb_pow_dist
st_distance(bart_utm, bart_utm)
?st_distance
st_distance(sfhomes15_sf, bart_utm[bart_utm$STATION == 'EMBARCADERO',])
st_distance(sfhomes15_utm, bart_utm[bart_utm$STATION == 'EMBARCADERO',])
nrow(sfhomes15_utm)
dist2emb <- st_distance(bart_utm[bart_utm$STATION == 'EMBARCADERO',],
sfhomes15_utm)
dist2emb <- set_units(dist2emb, km)
# check output
length(dist2emb)
nrow(sfhomes15_utm)
head(dist2emb, 10)
head(dist2emb, 10)
st_geometry(bart_utm)
st_combine(bart_utm)
dist_to_bart_sys = st_distance(sfhomes15_utm, bart_sys)
bart_sys = st_combine(bart_utm)
bart_sys
dist_to_bart_sys = st_distance(sfhomes15_utm, bart_sys)
head(dist_to_bart_sys, 10)
library(nngeo)
?st_nn
nns = st_nn(sfhomes15_utm, bart_utm, returnDist=T)
class(nns)
names(nns)
nns
nns['nn']
unlist(nns['nn'])
bart_utm[unlist(nns['nn']), 'STATION']
bart_utm[unlist(nns['nn']), 'STATION']
bart_utm[unlist(nns['nn']), 'STATION']$STATION
homes$nearest_bart = bart_utm[unlist(nns['nn']), 'STATION']$STATION
sfhomes15_utm$nearest_bart = bart_utm[unlist(nns['nn']), 'STATION']$STATION
head(sfhomes15_utm)
nn_dists = nns$dist
sfhomes15_utm$nearest_bart = as.numeric(nn_dists/1000)
head(sfhomes15_utm, 2)
tm_shape(sfboundary_utm) +
tm_polygons() +
tm_shape(bart_utm) +
tm_dots(col = 'skyblue', size = 0.5) +
tm_shape(sfhomes15_utm) +
tm_dots(col = 'nearest_bart', size = 0.25)
bart_stations_in_sf <-st_within(bart_utm, sfboundary_utm)
head(bart_stations_in_sf)
bart_stations_in_sf <-st_within(bart_utm, sfboundary_utm, sparse=F)
head(bart_stations_in_sf)
dim(bart_stations_in_sf)
dim(bart_utm)
T %in% bart_stations_in_sf
sum(bart_stations_in_sf)
bart_utm[bart_stations_in_sf, ]$STATION
bart_stations_in_sf
bart_utm[bart_stations_in_sf, ]
bart_utm[bart_stations_in_sf, ]$STATION
sfbart_utm = st_intersection(bart_utm, sfboundary_utm)
head(sfbart_utm, 2)
tmap_mode("view")
tm_shape(sfboundary_utm) +
tm_polygons(col="beige", border.col="black") +
tm_shape(sfbart_utm) +
tm_dots(col="red")
#read in tracts
sftracts <- st_read("./data", "sftracts_wpop")
#plot
plot(sftracts['pop14'])
homes_with_tracts <- st_within(sfhomes15_utm, sftracts)
homes_with_tracts <- st_within(sfhomes15_utm, sftracts)
# What is the CRS of the property data?
st_crs(sfhomes15_utm)
# What is the CRS of the census tracts?
st_crs(sftracts)
#transform to UTM
sftracts_utm = st_transform(sftracts, st_crs(sfhomes15_utm))
# make sure the CRSs are the same
st_crs(sftracts_utm) == st_crs(sfhomes15_utm)
homes_with_tracts <- st_within(sfhomes15_utm, sftracts_utm)
class(homes_with_tracts)
length(homes_with_tracts)
nrow(sftracts_utm)
nrow(sfhomes15_utm)
homes_with_tracts <- st_within(sftracts_utm, sfhomes15_utm)
homes_with_tracts
homes_with_tracts <- st_within(sfhomes15_utm, sftracts_utm)
class(homes_with_tracts)
?sgbp
head(homes_with_tracts)
unlist(homes_with_tracts)
sfhomes15_utm$home_geoid <- sftracts_utm[unlist(homes_with_tracts),]$GEOID
head(sfhomes15_utm, 2)
join_map = tm_shape(sftracts_utm) +
tm_polygons() +
tm_shape(sfhomes15_utm) +
tm_dots(col = 'home_geoid', size = 0.25)
