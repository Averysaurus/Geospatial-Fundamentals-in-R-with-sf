library(sf)     # simple features objects and methods
library(tmap)   # mapping spatial objects
library(raster) # reading in and operating on rasters
getwd()
setwd('./Geospatial-Fundamentals-in-R-with-sf/')
# Read in the 'sftracts_wpop' shapefile
SFtracts <- st_read("./data", "sftracts_wpop")
# Read in from CSV file
SFhomes <- read.csv('./data/sf_properties.csv',
stringsAsFactors = FALSE)
# subset the data
SFhomes15 <- subset(SFhomes, as.numeric(SalesYear) == 2015)
# coerce to an `sf` object
SFhomes15_sf <- st_as_sf(SFhomes15, coords = c('lon', 'lat'),
crs = 4326)
#Reproject to the SFtracts projection
#NOTE: We're overwriting the previous SFhomes15_sf object here! This is
#fine to do if we want, but we should always beware.
SFhomes15_sf = st_transform(SFhomes15_sf, st_crs(SFtracts))
#check projection equality
st_crs(SFhomes15_sf) == st_crs(SFtracts)
#read in nlcd data
nlcd = raster('./data/nlcd2011_sf.tif')
freq(nlcd)
#check projection equality
st_crs(nlcd) == st_crs(SFtracts)
#reproject
nlcd_WGS = projectRaster(nlcd, projectExtent(nlcd, st_crs(SFtracts)$proj4string))
#check projection equality again
st_crs(nlcd_WGS)$epsg == st_crs(SFtracts)$epsg
#crop
nlcd_WGS_crop = crop(nlcd_WGS, SFtracts)
plot(nlcd_WGS_crop)
nlcd_WGS_crop@legend = nlcd@legend
plot(nlcd_WGS_crop)
#reproject again, this time using nearest-neighbor interpolation
nlcd_WGS = projectRaster(nlcd, projectExtent(nlcd, st_crs(SFtracts)$proj4string),
method='ngb')
#check projection equality again
st_crs(nlcd_WGS)$epsg == st_crs(SFtracts)$epsg
#crop
nlcd_WGS_crop = crop(nlcd_WGS, SFtracts)
#grab our legend again
nlcd_WGS_crop@legend = nlcd@legend
#double-check by plotting
plot(nlcd_WGS_crop)
