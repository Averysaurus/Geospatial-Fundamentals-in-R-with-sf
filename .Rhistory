sfhomes <- read.csv('data/sf_properties_25ksample.csv',
stringsAsFactors = FALSE)
# Take a look at first 5 rows and a few of the columns
sfhomes[1:5,c("YearBuilt","totvalue","AreaSquareFeet","Neighborhood",
"NumBedrooms")]
sfhomes2010_15 <- subset(sfhomes_low2high, as.numeric(SalesYear) > 2009)
library(ggmap)
bart <- read.csv("./data/bart.csv")
# take a look
head (bart)
sfhomes15 <- subset(sfhomes, as.numeric(SalesYear) == 2015)
sfmap_with_bart <- ggmap(sf_basemap) +
geom_point(data=sfhomes15, aes(x=lon, y=lat))  +
geom_point(data=bart, aes(x=X,y=Y), col="red", size=3)
sfmap_with_bart <- ggplot() +
geom_point(data=sfhomes15, aes(x=lon, y=lat))  +
geom_point(data=bart, aes(x=X,y=Y), col="red", size=3)
sfmap_with_bart
landmarks <- read.csv("./data/landmarks.csv")
head(landmarks)
sfmap_bart_landmarks <- ggplot() +
geom_point(data=sfhomes15, aes(x=lon, y=lat))  +
geom_point(data=bart, aes(x=X,y=Y), col="red", size=3) +
geom_point(data=landmarks, aes(x=X,y=Y), shape=22,
col="black", fill="grey", size=4)
sfmap_bart_landmarks
library(dplyr)
library(sf)
tracts = st_read(dsn = './data', layer = 'sftracts')
tracts
#the object is of both the 'sf' and 'data.frame' classes
class(tracts)
#it has a number of columns (i.e. attributes, fields), including a geometry column
str(tracts)
#read in a shapefile of SF census tracts
plot(tracts)
#read in a shapefile of SF census tracts
plot(tracts['NAME'])
plot(tracts$NAME)
class(tracts['NAME'])
class(tracts[, 'NAME'])
class(subset(tracts, select='NAME'))
class(tracts$NAME)
tracts$geometry
st_crs(tracts)
str(st_crs(tracts))
st_crs(onj1) == st_crs(obj2)
bbox = st_bbox(tracts)
bbox
bbox$xmin
class(tracts$geometry)
class(tracts$geometry[[1]])
pnt = st_point(c(2, 4))
mpnt = st_multipoint(rbind(c(2, 2), c(3, 3), c(3, 2)))
line = st_linestring(rbind(c(0, 3), c(1, 4), c(2, 3)))
poly = st_polygon(list(rbind(c(1, 0), c(3, 4), c(5, 1), c(1, 0))))
plot(poly, col = 'yellow')
plot(line, col = 'blue', lwd = 3, add = T)
plot(mpnt, col = 'red', add = T)
plot(pnt, col = 'black', add = T)
geom = tracts$geometry[[1]]
str(geom)
geom[[1]]
df = data.frame(list('name' = c('someplace'), 'pop' = c(2)))
new_sf = st_sf(df, geometry = st_sfc(poly))
new_sf
plot(new_sf)
df = data.frame(list('name' = c('someplace'), 'pop' = c(2)))
df
st_sf
?st_sf
st_sfc(poly)
new_sf = st_sf(df, geometry = st_sfc(poly))
new_sf
plot(new_sf)
tracts
tracts_lonlat = st_transform(tracts, crs = 4326)
tracts_lonlat = st_transform(tracts, crs = st_crs(sfhomes15_sf))
sfhomes15_sf = st_as_sf(sfhomes15, coords = c('lon', 'lat'), crs = 4326)
tracts_lonlat = st_transform(tracts, crs = st_crs(sfhomes15_sf))
st_crs(sfhomes15_sf) == st_crs(tracts_lonlat)
ggplot() + geom_sf(data = tracts_lonlat) +
geom_sf(data = sfhomes15_sf, aes(col = totvalue))
landmarks_sf = st_as_sf(landmarks, coords = c('X', 'Y'), crs = 3857)
sfboundary = st_read('./data', 'sfboundary')
sfhighways = st_read('./data', 'sfhighways')
#check the CRS of sfboundary
st_crs(sfboundary) == st_crs(sfhomes15_sf)
#it doesn't need to be transformed, but we know the landmarks do (EPSG 3857)
#check th CRS of sfhighways
st_crs(sfhighways) == st_crs(sfhomes15_sf)
#it needs to be transformed
sfhighways_lonlat = st_transform(sfhighways, st_crs(sfhomes15_sf))
#and we know the landmarks need to be transformed, because we just set their CRS to EPSG:3857
landmarks_lonlat = st_transform(landmarks_sf, st_crs(sfhomes15_sf))
challenge_map = ggplot() +
geom_sf(data = sfboundary, col = 'purple') +
geom_sf(data = tracts_lonlat, alpha = 0.2) +  #alpha = 0.2 for transparency, so we can see sfboundary
geom_sf(data= sfhighways_lonlat, col = 'red') +
geom_sf(data = sfhomes15_sf, aes(col = totvalue)) +
geom_sf(data = landmarks_sf, col = 'red')
challenge_map
library(tmap)
qtm(sfhomes15_sf)
tmap_mode("view") # set tmap to interactive view mode
qtm(sfhomes15_sf) # Interactive - click on the points
tmap_mode("pot") # set tmap to interactive view mode
tmap_mode("plot") # set tmap to interactive view mode
qtm(sfhomes15_sf) # Interactive - click on the points
tm_shape(tracts) +
tm_polygons(col="beige", border.col="red", alpha=0.5)
# Map the SF Boundary first
overlay_map = tm_shape(sfboundary) +
tm_polygons(col="beige", border.col="black") +
# Overlay the highway lines next
tm_shape(sfhighways_lonlat) +
tm_lines(col="black") +
# Then add the house points
tm_shape(sfhomes15_sf) +
tm_dots(col="totvalue", size=.25)
overlay_map
ttm()
overlay_map
ttm()
ttm()
ttm()
ttm()
ttm()
ttm()
overlay_map
tm_shape(tracts) + tm_polygons()
last_map() -> x
tmap_last() -> x
x
x
tmap_mode('view')
tm_basemap("Stamen.Watercolor") +
tm_shape(sfhomes15_sf) +
tm_dots(col="totvalue", size=.25, title = "San Francisco Property Values (2015)") +
tm_tiles("Stamen.TonerLabels")
tmap_mode('view')
tm_basemap('OpenStreetMap.HOT') +
tm_shape(sfhomes15_sf) +
tm_dots(col="totvalue", size=.25, title = "San Francisco Property Values (2015)") +
tm_tiles("Stamen.TonerLabels")
tm_shape(sfboundary) +
tm_polygons(col="beige", border.col="black") +
tm_shape(sfhighways_lonlat) +
tm_lines(col="black") +
tm_shape(sfhomes15_sf) +
tm_dots(col="totvalue", size=.25,
title = "San Francisco Property Values (2015)",
popup.vars=c("SalesYear","totvalue","NumBedrooms",
"NumBathrooms","AreaSquareFeet")) +
tm_layout(inner.margins=c(.05, .2, .15, .05)) # bottom, left, top, right
sf_area = st_area(sfboundary_utm)
# Check the CRS
st_crs(sfboundary) == st_crs(sfhomes15_utm)
# Transform
sfboundary_utm <- st_transform(sfboundary, st_crs(sfhomes15_utm))
# Check again
st_crs(sfboundary_utm) == st_crs(sfhomes15_utm)
#highways are already in 26910!
st_crs(sfhighways)
#so we can use them as the target CRS
sfhomes15_utm <- st_transform(sfhomes15_sf, st_crs(sfhighways))
#OR we could just use the EPSG code directly
#sfhomes15_utm <- st_transform(sfhomes15_sf, 26910)
# Check the CRS
st_crs(sfboundary) == st_crs(sfhomes15_utm)
# Transform
sfboundary_utm <- st_transform(sfboundary, st_crs(sfhomes15_utm))
# Check again
st_crs(sfboundary_utm) == st_crs(sfhomes15_utm)
sf_area = st_area(sfboundary_utm)
sf_area
sf_area / (1000 * 1000) # Convert to square KM
set_units(sf_area, km^2)
library(units)
set_units(sf_area, km^2)
set_units(sf_area, km^3)
set_units(sf_area, km*2)
set_units(sf_area, sqkm)
head(valid_udunits(), 2)
st_length(sfhighways)
