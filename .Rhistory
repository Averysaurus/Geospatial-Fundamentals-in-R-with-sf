tm_shape(SFhomes15_sf) +
tm_dots(col = 'black', size = 0.5) +
tm_shape(bart_utm) +
tm_dots(col = 'skyblue', size = 1)
tmap_mode('plot')
challenge_map
sf_area = st_area(SFboundary_utm)
sf_area
class(sf_area)
typeof(sf_area)
sf_area / (1000 * 1000) # Convert to square KM
library(units)
set_units(sf_area, km^2)
head(valid_udunits(), 2)
st_area(SFboundary)
st_area(SFboundary)
st_area(SFboundary)
st_area(SFboundary)
st_area(SFboundary_utm)
st_length(SFhighways)
tot_length = set_units(sum(st_length(SFhighways)), km)
tot_length
perim = lwgeom::st_perimeter(tracts)
head(perim, 10)
emb_pow_dist = st_distance(bart_utm[bart_utm$STATION == 'EMBARCADERO',],
bart_utm[bart_utm$STATION == 'POWELL STREET',])
emb_pow_dist = set_units(emb_pow_dist, km)
emb_pow_dist
?st_distance
dist2emb <- st_distance(bart_utm[bart_utm$STATION == 'EMBARCADERO',],
SFhomes15_utm)
dist2emb <- set_units(dist2emb, km)
# check output
length(dist2emb)
nrow(SFhomes15_utm)
head(dist2emb, 10)
dist2emb <- set_units(st_distance(bart_utm[bart_utm$STATION == 'EMBARCADERO',],
SFhomes15_utm), km)
# check output
head(dist2emb, 10)
dist2emb <- st_distance(bart_utm[bart_utm$STATION == 'EMBARCADERO',],
SFhomes15_utm) %>% set_units(km)
# check output
head(dist2emb, 10)
bart_stations_in_sf <-st_within(bart_utm, SFboundary_utm)
head(bart_stations_in_sf)
bart_stations_in_sf <-st_within(bart_utm, SFboundary_utm, sparse=F)
head(bart_stations_in_sf)
dim(bart_stations_in_sf)
dim(bart_utm)
T %in% bart_stations_in_sf
bart_utm[bart_stations_in_sf, ]$STATION
sfbart_utm = st_intersection(bart_utm, SFboundary_utm)
sfbart_utm
tmap_mode("view")
tm_shape(SFboundary_utm) +
tm_polygons(col="beige", border.col="black") +
tm_shape(sfbart_utm) +
tm_dots(col="red")
tmap_mode("view")
tm_shape(SFboundary_utm) +
tm_polygons(col="beige", border.col="black") +
tm_shape(sfbart_utm) +
tm_dots(col="red")
tmap_mode("plot")
#read in tracts
sftracts <- st_read("./data", "sftracts_wpop")
#plot
plot(sftracts['pop14'])
homes_with_tracts <- st_within(SFhomes15_utm, sftracts)
# What is the CRS of the property data?
st_crs(SFhomes15_utm)
# What is the CRS of the census tracts?
st_crs(sftracts)
#transform to UTM
sftracts_utm = st_transform(sftracts, st_crs(SFhomes15_utm))
# make sure the CRSs are the same
st_crs(sftracts_utm) == st_crs(SFhomes15_utm)
homes_with_tracts <- st_within(SFhomes15_utm, sftracts_utm)
homes_with_tracts <- st_within(SFhomes15_utm, sftracts_utm)
class(homes_with_tracts)
length(homes_with_tracts)
nrow(sftracts_utm)
nrow(SFhomes15_utm)
?sgbp
head(homes_with_tracts)
SFhomes15_utm$home_geoid <- sftracts_utm[unlist(homes_with_tracts),]$GEOID
head(SFhomes15_utm, 2)
join_map = tm_shape(sftracts_utm) +
tm_polygons() +
tm_shape(SFhomes15_utm) +
tm_dots(col = 'home_geoid', size = 0.25)
#Note that tmap bins our tracts because we have so many
join_map
med_hh_inc <- read.csv("data/sf_med_hh_income2015.csv", stringsAsFactors = F,
colClasses = c("character","numeric"))
head(med_hh_inc)
#make sure we're using `base` `merge` (because multiple other packages
#that you might have read in also have a `merge` function)
SFhomes15_utm <- base::merge(SFhomes15_utm,
med_hh_inc, by.x="home_geoid", by.y="GEOID")
head(SFhomes15_utm, 2) # Look for the col medhhinc
tmap_mode("view")
tm_shape(SFhomes15_utm) + tm_dots(col="medhhinc")
?sf::aggregate.sf
tracts_with_mean_val <- aggregate(x = SFhomes15_utm["totvalue"],
by = sftracts_utm,
FUN = mean)
class(tracts_with_mean_val)
head(tracts_with_mean_val, 2)
nrow(tracts_with_mean_val) == nrow(sftracts_utm)
sftracts_utm$mean_totvalue <- tracts_with_mean_val$totvalue
head(sftracts_utm, 2) # check it
choropleth =
tm_shape(sftracts_utm) +
tm_polygons(col="mean_totvalue", border.col=NA)
choropleth
choropleth + tm_shape(SFhomes15_utm) + tm_dots(size = 0.01)
#remember: our units are meters!
bart_1km_buffer <- st_buffer(sfbart_utm, dist=1000)
tm_shape(bart_1km_buffer) + tm_polygons(col="red") +
tm_shape(sfbart_utm) + tm_dots()
SFhomes_near_bart <-st_intersection(SFhomes15_utm, bart_1km_buffer)
# Take a look
head(SFhomes_near_bart)
tmap_mode('view')
tm_shape(bart_1km_buffer) + tm_borders(col="red") +
tm_shape(sfbart_utm) + tm_dots() +
tm_shape(SFhomes_near_bart) +
tm_dots(col = 'green', size = 0.03)
our_packages<- c("ggplot2", "sf", "units", "tmap", "raster")
for (i in our_packages) {
if ( i %in% rownames(installed.packages()) == FALSE) {
install.packages(i)
}
}
library(sf)     # simple features objects and methods
library(tmap)   # mapping spatial objects
library(raster) # reading in and operating on rasters
# Read in the 'sftracts_wpop' shapefile
SFtracts <- st_read("./data", "sftracts_wpop")
# Read in from CSV file
SFhomes <- read.csv('./data/sf_properties.csv',
stringsAsFactors = FALSE)
# subset the data
SFhomes15 <- subset(SFhomes, as.numeric(SalesYear) == 2015)
# coerce to an `sf` object
SFhomes15_sf <- st_as_sf(SFhomes15, coords = c('lon', 'lat'),
crs = 4326)
#Reproject to the SFtracts projection
#NOTE: We're overwriting the previous SFhomes15_sf object here! This is
#fine to do if we want, but we should always beware.
SFhomes15_sf = st_transform(SFhomes15_sf, st_crs(SFtracts))
#check projection equality
st_crs(SFhomes15_sf) == st_crs(SFtracts)
# Reading in and plotting raster files
#read in a Bay Area DEM (Digital Elevation Model)
#(from http://www.webgis.com/terr_pages/CA/dem1/sanfrancisco.html)
DEM = raster('./data/san_francisco-e.DEM')
#plot it
plot(DEM)
?raster::plot
#plot it
plot(DEM, col=heat.colors(100))
#plot it
plot(DEM, col=heat.colors(10))
#plot it
plot(DEM, col=topo.colors(10))
#plot it
plot(DEM, col=cm.colors(10))
#plot it
plot(DEM, col=terrain.colors(10))
#plot it
plot(DEM, col=rainbow(10))
#plot it
plot(DEM)
DEM
DEM@extent
DEM@crs
DEM@ncols
class(DEM)
typeof(DEM)
DEM
(DEM@extent@xmax - DEM@extent@xmin) / DEM@ncols
(DEM@extent@ymax - DEM@extent@ymin) / DEM@nrows
DEM
str(DEM@data)
DEM@data@values
DEM@data@inmemory
DEM@data@fromdisk
DEM[10:15, 20:30]
DEM[,]
#coerce our whole raser's dataset to a matrix, with the appropriate number
#of columns, and
matrix(DEM[,], ncol = ncol(DEM), byrow = TRUE)
test = raster(matrix(DEM[,], ncol = ncol(DEM), byrow = TRUE))
test
DEM[10:15, 20:30, drop = FALSE]
test = DEM[10:15, 20:30, drop = FALSE]
plot(test)
test@data@values
test@data@inmemory
test@data@fromdisk
#check out its projection
proj4string(DEM)
#reproject tracts to our DEM projection
SFtracts_NAD = st_transform(SFtracts, st_crs(DEM))
DEM_WGS = projectRaster(DEM, projectExtent(DEM, st_crs(SFtracts)))
?projectRaster
class(st_crs(SFtracts))
class(crs(st_crs(SFtracts)$proj4string))
class(crs(st_crs(SFtracts)$proj4string))
DEM_WGS = projectRaster(DEM, projectExtent(DEM, crs(st_crs(SFtracts)$proj4string)))
st_crs(SFtracts_NAD) == st_crs(DEM)
st_crs(DEM_WGS) == st_crs(SFtracts)
st_crs(DEM_WGS)
st_crs(SFtracts)
DEM_WGS = projectRaster(DEM, projectExtent(DEM, crs(st_crs(SFtracts)$proj4string)))
st_crs(SFtracts_NAD) == st_crs(DEM)
st_crs(DEM_WGS) == st_crs(SFtracts)
crs(SFtract)
SFtracts$geometry
SFtracts$geometry
st_crs(SFtracts)
crs(st_crs(SFtracts)_
crs(st_crs(SFtracts))
crs(st_crs(SFtracts)$proj4string)
projectExtent(DEM, crs(st_crs(SFtracts)$proj4string))
st_crs(projectExtent(DEM, crs(st_crs(SFtracts)$proj4string)))
proj4string(projectExtent(DEM, crs(st_crs(SFtracts)$proj4string)))
proj4string(DEM_WGS)
st_crs(DEM_WGS)
st_crs(projectExtent(DEM, crs(st_crs(SFtracts)$proj4string)))
st_crs(SFtracts)
st_crs(DEM_WGS)
st_crs(SFtracts)
st_crs(SFtracts_NAD) == st_crs(DEM)
st_crs(DEM_WGS) == st_crs(SFtracts)
proj4string(DEM_WGS) == proj4string(SFtracts)
st_crs(SFtracts_NAD) == st_crs(DEM)
st_crs(DEM_WGS) == st_crs(SFtracts)
proj4string(DEM_WGS)
st_crs(SFtracts_NAD) == st_crs(DEM)
st_crs(DEM_WGS) == st_crs(SFtracts)
proj4string(SFtracts)
st_crs(SFtracts_NAD) == st_crs(DEM)
st_crs(DEM_WGS) == st_crs(SFtracts)
st_crs(SFtracts)
SFtracts
st_crs(SFtracts_NAD) == st_crs(DEM)
st_crs(DEM_WGS) == st_crs(SFtracts)
proj4string(DEM_WGS) == st_crs(SFtracts)
proj4string(DEM_WGS) == st_crs(SFtracts)
proj4string(DEM_WGS)
st_crs(SFtracts)
st_crs(SFtracts)$proj4string
crs(st_crs(SFtracts)$proj4string)
proj4string(crs(st_crs(SFtracts)$proj4string))
crs(st_crs(SFtracts)$proj4string)$proj4string
crs(st_crs(SFtracts)$proj4string)$proj4str
crs(st_crs(SFtracts)$proj4string)
proj4string(crs(st_crs(SFtracts)$proj4string))
x = crs(st_crs(SFtracts)$proj4string)
x
x@projargs
st_crs(SFtracts)$proj4string
proj4string(SFtracts)
st_crs(SFtracts)
st_crs(SFtracts)$EPSG
st_crs(SFtracts)@EPSG
st_crs(SFtracts)
x = st_crs(SFtracts)
x$epsg
DEM_WGS
DEM_WGS@crs
DEM_WGS@crs@projargs
DEM_WGS@crs
DEM_WGS@crs@projargs
stcrs(DEM_WGS)
st_crs(DEM_WGS)
st_crs(DEM_WGS)@epsg
st_crs(DEM_WGS)$epsg
st_crs(DEM_WGS)$epsg == st_crs(SFtracts)$epsg
st_crs(DEM_WGS)
st_crs(SFtracts)
st_crs(DEM_WGS)$epsg == st_crs(SFtracts)$epsg
SFhomes15_sp = as_Spatial(SFhomes15_sf)
SFhomes15_sp
str(SFhomes15_sp)
str(SFhomes15_sp)
plot(SFhomes15_sp)
SFhomes15_sfagain = st_as_sf(SFhomes15_sp)
plot(SFhomes15_sfagain['totvalue'])
# clip the WGS CRS version of the rasters to SFtracts
DEM_WGS_crop = crop(DEM_WGS, SFtracts)
# Clip the NAD CRS version
DEM_crop = crop(DEM, SFtracts_NAD)
# clip the WGS CRS version of the rasters to SFtracts
DEM_WGS_crop = crop(DEM_WGS, SFtracts)
# Clip the NAD CRS version
DEM_crop = crop(DEM, SFtracts_NAD)
plot(DEM_WGS_crop)
#plot together
plot(DEM_WGS_crop)
plot(SFtracts, add = T, col = NA)
#plot together
plot(DEM_WGS_crop)
plot(st_geometry(SFtracts), add = T, col = NA)
DEM_WGS_crop_masked = mask(DEM_WGS_crop, SFtracts)
DEM_WGS_crop_masked
DEM_WGS_crop
plot(DEM_WGS_crop_masked)
plot(SFtracts, add = T, col = NA)
plot(DEM_WGS_crop_masked)
plot(st_geometry(SFtracts), add = T, col = NA)
my_map <- tm_shape(DEM_WGS_crop_masked) +
tm_raster() +
tm_shape(SFtracts) +
tm_borders() +
# Set mode to interactive
tmap_mode("view")
my_map
#write our reprojected, cropped data to the data directory, using the Geotiff format
#(and allow R to overwrite if file already exists)
writeRaster(DEM_WGS_crop_masked, filename="./data/DEM_reproject_crop.tif", format="GTiff", overwrite = T)
# get the elevation for every cell in each of the census tracts
elev = extract(DEM_WGS_crop, SFtracts)
#what did that give us?
head(elev)
length(elev)
nrow(SFtracts)
mean_elev = lapply(elev, mean, na.rm = T)
head(mean_elev)
SFtracts$mean_elev = unlist(mean_elev)
#what did we get?
elev_map <- tm_shape(SFtracts) +
tm_polygons(col = 'mean_elev') +
tm_layout("The pain of biking in SF, by census tract",
inner.margins=c(0,0,.1,0), title.size=4.8)
elev_map
elev = extract(DEM_WGS_crop, SFtracts, fun=mean)
#what did that give us?
head(elev)
#read in nlcd data
nlcd = raster('./data/nlcd2011_sf.tif')
#plot nlcd
plot(nlcd)
freq(nlcd)
barplot(nlcd)
#check projection equality
st_crs(nlcd) == st_crs(SFtracts)
#reproject
nlcd_WGS = projectRaster(nlcd, projectExtent(nlcd, crs(st_crs(SFtracts)$proj4string)))
#check projection equality again
st_crs(nlcd_WGS) == st_crs(SFtracts)
#crop
nlcd_WGS_crop = crop(nlcd_WGS, SFtracts)
#check projection equality
st_crs(nlcd) == st_crs(SFtracts)
#reproject
nlcd_WGS = projectRaster(nlcd, projectExtent(nlcd, crs(st_crs(SFtracts)$proj4string)))
#check projection equality again
st_crs(nlcd_WGS)@epsg == st_crs(SFtracts)@epsg
#crop
nlcd_WGS_crop = crop(nlcd_WGS, SFtracts)
#check projection equality
st_crs(nlcd) == st_crs(SFtracts)
#reproject
nlcd_WGS = projectRaster(nlcd, projectExtent(nlcd, crs(st_crs(SFtracts)$proj4string)))
#check projection equality again
st_crs(nlcd_WGS)$epsg == st_crs(SFtracts)$epsg
#crop
nlcd_WGS_crop = crop(nlcd_WGS, SFtracts)
plot(nlcd_WGS_crop)
nlcd@legend
nlcd_WGS_crop@legend
nlcd_WGS_crop@legend = nlcd@legend
plot(nlcd_WGS_crop)
?reclassify
reclass_vec <- c(0, 20, NA, # water will be set to NA (i.e. 'left out' of our analysis)
20, 21, 1, # we'll treat developed open space as greenspace, based on NLCD description
21, 30, 0, # developed and hardscape will have 0s
30, 31, NA,
31, Inf, 1) # greensapce will have 1s
reclass_vec
reclass_m <- matrix(reclass_vec, ncol = 3, byrow = TRUE)
reclass_m
nlcd_green <- reclassify(nlcd_WGS_crop, reclass_m)
freq(nlcd_green)
barplot(nlcd_green)
plot(nlcd_green)
#extract the mean nlcd_simple values to tract polygons
greenspace = extract(nlcd_green, SFtracts, fun=mean)
greenspace
#extract the mean nlcd_simple values to tract polygons,
#this time setting na.rm to TRUE
greenspace = extract(nlcd_green, SFtracts, fun=mean, na.rm = T)
#and add to our SFtracts dataframe (which we can do because order is preserved)
SFtracts$prop_greenspace = greenspace
#aggregate totvalue to SFtracts
SFtracts_w_mean_val = aggregate(x = SFhomes15_sf['totvalue'],
by = SFtracts,
FUN = mean)
#and add the totvalue column to our SFtracts dataframe
SFtracts$mean_totvalue = SFtracts_w_mean_val$totvalue
SFhomes15_sf
SFtracts
SFtracts_w_mean_val = aggregate(x = SFhomes15_sf['totvalue'],
by = SFtracts,
FUN = mean)
DEM_WGS
SFtracts$mean_totvalue = SFtracts_w_mean_val$totvalue
qtm(SFtracts_w_mean_val, fill = 'totvalue')
mod = lm(mean_totvalue ~ mean_elev + prop_greenspace, data = SFtracts)
summary(mod)
#Take a random subset of our 2015 homes, to save on computer time
SFhomes15_sample = SFhomes15_sf[sample(seq(nrow(SFhomes15_sf)),
replace = FALSE, size = 2000), ]
#reproject
SFhomes15_utm <- st_transform(SFhomes15_sample, 26910)
DEM_utm = projectRaster(DEM,
projectExtent(DEM,
crs(st_crs(SFhomes15_utm)$proj4string)))
nlcd_green_utm = projectRaster(nlcd_green,
projectExtent(nlcd_green,
crs(st_crs(SFhomes15_utm)$proj4string)))
#check projections
st_crs(SFhomes15_utm) == st_crs(DEM_utm)
st_crs(SFhomes15_utm) == st_crs(nlcd_green_utm)
#create buffer
SFhomes15_utm_buff = st_buffer(SFhomes15_utm, dist = 100)
#sum the greenspace within the buffers
#NOTE: This will take a couple minutes to run...
greenspace_homes = extract(nlcd_green_utm, SFhomes15_utm_buff, fun = mean, na.rm = T)
#add that as a column in our SFhomes15_utm dataframe
SFhomes15_utm$greenspace = greenspace_homes
#extract the elevation to the homes
#NOTE: no need for fun or na.rm arguments here, because the homes
#and points, not polygons, so only a single cell will extract to each
elev_homes = extract(DEM_utm, SFhomes15_utm)
#add that as a column in our SFhomes15_utm dataframe too
SFhomes15_utm$elev = elev_homes
mod = lm(totvalue ~ elev + greenspace, data = SFhomes15_utm)
summary(mod)
#(from http://climate.calcommons.org/dataset/monthly-summertime-fog)
#(units are in average hours per day)
karl_files = unique(gsub('.aux.xml', '', list.files('./data/CalMnYr')))
karl_files = karl_files[grep('flcc', karl_files)]
# Take  a look
karl_files
karl <- stack(paste0('./data/CalMnYr/', karl_files))
# look at what we made!
karl
#plot a few
plot(karl[[7:9]])
#what's the projection?
st_crs(karl)
karl_WGS = projectRaster(karl, projectExtent(karl, crs(st_crs(SFtracts)$proj4string)))
# check resultant CRS
st_crs(karl_WGS) == st_crs(SFtracts)
st_crs(karl_WGS)$epsg == st_crs(SFtracts)$epsg
karl_WGS
# See the documentation!
?raster::brick
# Crop it to SFtracts
karl_WGS_crop = crop(karl_WGS, SFtracts)
#Note that R vectorized that operation across our entire RasterBrick, the same way that it vectorizes many operations, e.g. 3<4 vs 3< seq(4)
# now let's make our same plot again
par(mfrow = c(1,2))
plot(karl_WGS[[7]])
plot(SFtracts, add = T, reset=F, key.pos = NULL, col = NA)
plot(karl_WGS_crop[[7]])
plot(SFtracts, add = T, reset = F, key.pos = NULL, col = NA)
plot(st_geometry(SFtracts), add = T, reset = F, key.pos = NULL, col = NA)
# now let's make our same plot again
par(mfrow = c(1,2))
plot(karl_WGS[[7]])
plot(st_geometry(SFtracts), add = T, reset=F, key.pos = NULL, col = NA)
plot(karl_WGS_crop[[7]])
plot(st_geometry(SFtracts), add = T, reset = F, key.pos = NULL, col = NA)
# Mean values
mean_karl_WGS_crop = mean(karl_WGS_crop)
mean_karl_WGS_crop
plot(mean_karl_WGS_crop)
plot(SFtracts, add = T, col = NA)
plot(mean_karl_WGS_crop)
plot(st_geometry(SFtracts), add = T, col = NA)
# This won't work
sd_karl_WGS_crop = sd(karl_WGS_crop)
sd_karl_WGS_crop = calc(karl_WGS_crop, sd)
#plot that too
par(mfrow = c(1,2))
plot(mean_karl_WGS_crop)
plot(SFtracts, add = T, reset=F, key.pos=NULL, col = NA)
plot(sd_karl_WGS_crop)
plot(SFtracts, add = T, reset=F, key.pos=NULL, col = NA)
#plot that too
par(mfrow = c(1,2))
plot(mean_karl_WGS_crop, main="mean summer fog hours")
plot(st_geometry(SFtracts), add = T, reset=F, key.pos=NULL, col = NA)
plot(sd_karl_WGS_crop, main="sd summer fog hours")
plot(st_geometry(SFtracts), add = T, reset=F, key.pos=NULL, col = NA)
SFtracts$mean_karl = extract(mean_karl_WGS_crop, SFtracts, mean)
# Linear regression model
mod = lm(mean_karl ~ mean_elev, data = SFtracts)
summary(mod)
mod = lm(totvalue ~ elev + greenspace, data = SFhomes15_utm)
summary(mod)
summary(mod)
# Linear regression model
mod = lm(mean_karl ~ mean_elev, data = SFtracts)
summary(mod)
