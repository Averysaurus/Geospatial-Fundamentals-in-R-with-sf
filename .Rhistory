# Check the CRS
st_crs(SFboundary) == st_crs(SFhomes15_utm)
# Transform
SFboundary_utm <- st_transform(SFboundary, st_crs(SFhomes15_utm))
# Check again
st_crs(SFboundary_utm) == st_crs(SFhomes15_utm)
bart_utm = st_transform(bart_sf, st_crs(SFhomes15_utm))
st_crs(bart_utm)$epsg
st_crs(SFboundary_utm)$epsg
st_crs(SFhighways)$epsg
st_crs(SFhomes15_utm)$epsg
st_crs(bart_utm)
st_crs(bart_utm)
str(st_crs(bart_utm))
st_crs(bart_utm)$proj4string
plot(SFboundary_utm)
lines(SFhighways, col='purple', lwd=4)
plot(st_geometry(SFboundary_utm))
plot(st_geometry(SFboundary_utm))
plot(st_geometry(SFhighways), col='purple', lwd=4, add = T)
plot(st_geometry(SFhomes15_utm), add = T, pch = 19, cex = 0.5)
plot(st_geometry(bart_utm), col="skyblue", pch=19, cex = 1, add=T)
tm_shape(SFboundary_utm) +
tm_polygons(col = 'black')
tm_polygons(border = 'black')
challenge_map = tm_shape(SFboundary) +
tm_polygons() +
tm_shape(SFhighways) +
tm_lines(col = 'purple', lwd = 4) +
tm_shape(SFhomes15_sf) +
tm_dots(col = 'black', size = 0.5) +
tm_shape(bart_utm) +
tm_dots(col = 'skyblue', size = 1)
tmap_mode('plot')
challenge_map
sf_area = st_area(SFboundary_utm)
sf_area
tm_polygons(border = 'black')
sf_area
sf_area / (1000 * 1000) # Convert to square KM
set_units(sf_area, km^2)
library(units)
set_units(sf_area, km^2)
valid_udunits()
set_units(sf_area, kilom^2)
set_units(sf_area, kilometer^2)
set_units(sf_area, "km"^2)
st_area(SFboundary)
st_area(SFboundary)
st_area(SFboundary) - st_area(SFboundary_utm)
?sf::st_area
plot(SFhighways)
SFhighways
st_length(SFhighways)
length(st_length(SFhighways))
length(st_length(SFhighways))
sum(st_length(SFhighways))
st_length(SFhighways)
st_length(SFhighways)[1:2]
sum(st_length(SFhighways)[1:2])
sum(st_length(SFhighways)[1:2])
sum(st_length(SFhighways))
set_units(sum(st_length(SFhighways)), km)
perim = lwgeom::st_perimeter(tracts)
head(perim, 10)
tm_shape(tracts) + tm_polygons()
?st_distance
bart_utm[bart_utm$STATION == 'EMBARCADERO',]
bart_utm[bart_utm$STATION == 'POWELL STREET',]
emb_pow_dist = st_distance(bart_utm[bart_utm$STATION == 'EMBARCADERO',],
bart_utm[bart_utm$STATION == 'POWELL STREET',])
emb_pow_dist = set_units(emb_pow_dist, km)
emb_pow_dist
emb_pow_dist
matix(c(1,1,1,1), nrow=2)
matrix(c(1,1,1,1), nrow=2)
dist2emb <- st_distance(bart_utm[bart_utm$STATION == 'EMBARCADERO',],
SFhomes15_utm)
dist2emb <- set_units(dist2emb, km)
# check output
length(dist2emb)
nrow(SFhomes15_utm)
head(dist2emb, 10)
dist2emb
dist2emb <- st_distance(SFhomes15_utm, bart_utm[bart_utm$STATION == 'EMBARCADERO',])
dist2emb <- set_units(dist2emb, km)
dis
dist2emb
st_distance(SFhomes15_utm, bart_utm)
dim(st_distance(SFhomes15_utm, bart_utm))
?st_distance
dim(st_distance(bart_utm))
dim(st_distance(bart_utm))
st_distance(bart_utm)
st_distance(tracts[1,], tracts[2,])
st_distance(tracts, tracts[2,])
st_distance(tracts)
?st_within
bart_stations_in_sf <-st_within(bart_utm, SFboundary_utm)
bart_stations_in_sf
bart_stations_in_sf[1:40]
bart_stations_in_sf <-st_within(bart_utm, SFboundary_utm, sparse=F)
bart_stations_in_sf
as.vector(bart_stations_in_sf)
bart_utm[as.vector(bart_stations_in_sf), ]
bart_stations_in_sf
bart_stations_in_sf <-st_within(bart_utm, SFboundary_utm, sparse=F
)))
head(bart_utm)
bart_utm[bart_utm$DIST == 4, ]
bart_utm$DIST == 4
bart_utm[as.vector(bart_stations_in_sf), c('NAME')]
bart_utm[as.vector(bart_stations_in_sf), 1]
bart_utm[as.vector(bart_stations_in_sf), ]
bart_utm[as.vector(bart_stations_in_sf), ]$NAME
bart_utm[as.vector(bart_stations_in_sf), ]$STATION
sfbart_utm = st_intersection(bart_utm, SFboundary_utm)
sfbart_utm
tmap_mode("view")
tm_shape(SFboundary_utm) +
tm_polygons(col="beige", border.col="black") +
tm_shape(sfbart_utm) +
tm_dots(col="red")
tmap_mode("plot")
#read in tracts
sftracts <- st_read("./data", "sftracts_wpop")
homes_with_tracts <- st_within(SFhomes15_utm, sftracts)
homes_with_tracts <- st_within(SFhomes15_utm, sftracts)
# What is the CRS of the property data?
st_crs(SFhomes15_utm)
# What is the CRS of the census tracts?
st_crs(sftracts)
#transform to UTM
sftracts_utm = st_transform(sftracts, st_crs(SFhomes15_utm))
# make sure the CRSs are the same
st_crs(sftracts_utm) == st_crs(SFhomes15_utm)
homes_with_tracts <- st_within(SFhomes15_utm, sftracts_utm)
class(homes_with_tracts)
class(homes_with_tracts)
length(homes_with_tracts)
nrow(sftracts_utm)
nrow(SFhomes15_utm)
?sf::sgbp
homes_with_tracts
homes_with_tracts
unlist(homes_with_tracts)
sftracts_utm[unlist(homes_with_tracts),]
sftracts_utm[unlist(homes_with_tracts),]$GEOID
SFhomes15_utm$home_geoid <- sftracts_utm[unlist(homes_with_tracts),]$GEOID
head(SFhomes15_utm, 2)
join_map = tm_shape(sftracts_utm) +
tm_polygons() +
tm_shape(SFhomes15_utm) +
tm_dots(col = 'home_geoid', size = 0.25)
#Note that tmap bins our tracts because we have so many
join_map
dim(homes_with_tracts)
#Read in from shapefile
tracts = st_read(dsn = './data', layer = 'sftracts')
library(sf)
# Read in from CSV file
SFhomes <- read.csv('data/sf_properties_25ksample.csv',
stringsAsFactors = FALSE)
# subset the data
SFhomes15 <- subset(SFhomes, as.numeric(SalesYear) == 2015)
# convert to an `sf` object with a defined CRS (WGS84)
SFhomes15_sf <- st_as_sf(SFhomes15, coords = c('lon', 'lat'),
crs = 4326)
#Read in from a CSV.
bart <- read.csv("./data/bart.csv", stringsAsFactors = F)
#Convert to sf object
bart_sf <- st_as_sf(bart, coords = c('X', 'Y'), crs = 4326)
#Read in from a CSV
landmarks <- read.csv("./data/landmarks.csv")
#Convert to sf
landmarks_sf = st_as_sf(landmarks, coords = c('X', 'Y'), crs = 3857)
#Reproject to lonlat
landmarks_lonlat = st_transform(landmarks_sf, st_crs(SFhomes15_sf))
#Read in from shapefile
SFboundary <- st_read('./data', 'SFboundary')
#Read in from shapefile
SFhighways = st_read('./data', 'SFhighways')
#Transform to lonlat
SFhighways_lonlat = st_transform(SFhighways, st_crs(SFhomes15_sf))
#Read in from shapefile
tracts = st_read(dsn = './data', layer = 'sftracts')
#Transform to lonlat
tracts_lonlat = st_transform(tracts, crs = 4326)
sfbart_utm = st_intersection(bart_utm, SFboundary_utm)
homes_with_tracts <- st_within(SFhomes15_utm, sftracts)
#transform to UTM
sftracts_utm = st_transform(sftracts, st_crs(SFhomes15_utm))
#read in tracts
sftracts <- st_read("./data", "sftracts_wpop")
homes_with_tracts <- st_within(SFhomes15_utm, sftracts)
#so we can use them as the target CRS
SFhomes15_utm <- st_transform(SFhomes15_sf, st_crs(SFhighways))
#read in tracts
sftracts <- st_read("./data", "sftracts_wpop")
homes_with_tracts <- st_within(SFhomes15_utm, sftracts)
#transform to UTM
sftracts_utm = st_transform(sftracts, st_crs(SFhomes15_utm))
homes_with_tracts <- st_within(SFhomes15_utm, sftracts_utm)
homes_with_tracts <- st_within(SFhomes15_utm, sftracts_utm)
SFhomes15_utm$home_geoid <- sftracts_utm[unlist(homes_with_tracts),]$GEOID
med_hh_inc <- read.csv("data/sf_med_hh_income2015.csv", stringsAsFactors = F, colClasses = c("character","numeric"))
head(med_hh_inc)
?merge
#make sure we're using `base` `merge` (because multiple other packages
#that you might have read in also have a `merge` function)
SFhomes15_utm <- base::merge(SFhomes15_utm,
med_hh_inc, by.x="home_geoid", by.y="GEOID")
SFhomes15_utm
tmap_mode("view")
tm_shape(sftracts_utm) + tm_polygons() +
tm_shape(SFhomes15_utm) + tm_dots(col="medhhinc")
library(tmap)
tmap_mode("view")
tm_shape(sftracts_utm) + tm_polygons() +
tm_shape(SFhomes15_utm) + tm_dots(col="medhhinc")
?sf::aggregate.sf
tracts_with_mean_val <- aggregate(x = SFhomes15_utm["totvalue"],
by = sftracts_utm,
FUN = mean)
tracts_with_mean_val
tracts_with_mean_val <- aggregate(x = SFhomes15_utm,
by = sftracts_utm,
FUN = mean)
tracts_with_mean_val
tracts_with_mean_val <- aggregate(x = SFhomes15_utm["totvalue"],
by = sftracts_utm,
FUN = mean)
tracts_with_mean_val
nrow(tracts_with_mean_val) == nrow(sftracts_utm)
str(tracts_with_mean_val)
tracts_with_mean_val$geometry
tracts_with_mean_val$geometry[1]
tracts_with_mean_val$geometry[1]
tracts_with_mean_val[1,2]
tracts_with_mean_val[1,2][1]
tracts_with_mean_val[1,2][[1]]
x = list(1='a', 2='b', 3='c')
list(c(1='a', 2='b', 3='c'))
list(c('a', 'b', 'c'))
list('a', 'b', 'c')
x = list('a', 'b', 'c')
x
x[3]
x[[3]]
x[3]
x[[3]]
head(iris)
class(iris)
typeof(iris)
sftracts_utm$mean_totvalue <- tracts_with_mean_val$totvalue
head(sftracts_utm, 2) # check it
choropleth =
tm_shape(sftracts_utm) +
tm_polygons(col="mean_totvalue", border.col=NA)
choropleth
choropleth + tm_shape(SFhomes15_utm) + tm_polygons(col='totvalue')
choropleth + tm_shape(SFhomes15_utm) + tm_dots(col='totvalue')
?st_buffer
sfbart_utm = st_intersection(bart_utm, SFboundary_utm)
# Transform Bart to UTM
bart_utm <- st_transform(bart_sf, st_crs(SFhomes15_utm))
sfbart_utm = st_intersection(bart_utm, SFboundary_utm)
SFboundary_utm
# Transform
SFboundary_utm <- st_transform(SFboundary, st_crs(SFhomes15_utm))
sfbart_utm
sfbart_utm = st_intersection(bart_utm, SFboundary_utm)
st_crs(sfbart_utm)
#remember: our units are meters!
bart_1km_buffer <- st_buffer(sfbart_utm, dist=1000)
tm_shape(bart_1km_buffer) + tm_polygons(col="red") +
tm_shape(sfbart_utm) + tm_dots()
SFhomes_near_bart <-st_intersection(SFhomes15_utm, bart_1km_buffer)
# Take a look
head(SFhomes_near_bart)
tmap_mode('view')
tm_shape(bart_1km_buffer) + tm_borders(col="red") +
tm_shape(sfbart_utm) + tm_dots() +
tm_shape(SFhomes_near_bart) +
tm_dots(col = 'green', size = 0.03)
library(sf)     # simple features objects and methods
library(tmap)   # mapping spatial objects
library(raster) # reading in and operating on rasters
# Read in the 'sftracts_wpop' shapefile
SFtracts <- st_read("./data", "sftracts_wpop")
# Read in from CSV file
SFhomes <- read.csv('./data/sf_properties.csv',
stringsAsFactors = FALSE)
# subset the data
SFhomes15 <- subset(SFhomes, as.numeric(SalesYear) == 2015)
# coerce to an `sf` object
SFhomes15_sf <- st_as_sf(SFhomes15, coords = c('lon', 'lat'),
crs = 4326)
#Reproject to the SFtracts projection
#NOTE: We're overwriting the previous SFhomes15_sf object here! This is
#fine to do if we want, but we should always beware.
SFhomes15_sf = st_transform(SFhomes15_sf, st_crs(SFtracts))
#check projection equality
st_crs(SFhomes15_sf) == st_crs(SFtracts)
#read in a Bay Area DEM (Digital Elevation Model)
#(from http://www.webgis.com/terr_pages/CA/dem1/sanfrancisco.html)
DEM = raster('./data/san_francisco-e.DEM')
#plot it
plot(DEM)
class(DEM)
class(DEM)
typeof(DEM)
str(DEM)
DEM@data
DEM@data@values
DEM@data@values
DEM[10:15, 20:30]
DEM[,]
R
#coerce our whole raser's dataset to a matrix, with the appropriate number
#of columns, and
matrix(DEM[,], ncol = ncol(DEM), byrow = TRUE)
raster(matrix(DEM[,], ncol = ncol(DEM), byrow = TRUE))
test = raster(matrix(DEM[,], ncol = ncol(DEM), byrow = TRUE))
test@data@fromdisk
test@data@fromdisk
DEM@data@fromdisk
test = DEM[10:15, 20:30, drop = FALSE]
plot(test)
plot(DEM)
proj4string(DEM)
st_crs(DEM)
proj4string(tracts)
proj4string?
proj4string
?proj4string
#reproject tracts to our DEM projection
SFtracts_NAD = st_transform(SFtracts, st_crs(DEM))
?projectRaster
projectExtent(DEM, st_crs(SFtracts))
st_crs(SFtracts)
class(st_crs(SFtracts))
st_crs(SFtracts)
st_crs(SFtracts)$proj4string
>crs
?crs
crs(st_crs(SFtracts)$proj4string)
class(crs(st_crs(SFtracts)$proj4string))
DEM_WGS = projectRaster(DEM, projectExtent(DEM, st_crs(SFtracts)$proj4string))
DEM_WGS
SFtracts
class(crs(st_crs(SFtracts)$proj4string))
DEM_WGS = projectRaster(DEM, projectExtent(DEM, crs(st_crs(SFtracts)$proj4string)))
st_crs(SFtracts_NAD) == st_crs(DEM)
st_crs(DEM_WGS) == st_crs(SFtracts)
st_crs(DEM_WGS)
st_crs(SFtracts)
DEM_WGS = projectRaster(DEM, projectExtent(DEM, st_crs(SFtracts)$proj4string))
st_crs(SFtracts_NAD) == st_crs(DEM)
st_crs(DEM_WGS) == st_crs(SFtracts)
st_crs(DEM_WGS)
st_crs(SFtracts)
st_crs(4326)
sf::as_Spatial(tracts)
as_Spatial(tracts)
st_as_sf(as_Spatial(tracts))
# clip the WGS CRS version of the rasters to SFtracts
DEM_WGS_crop = crop(DEM_WGS, SFtracts)
# Clip the NAD CRS version
DEM_crop = crop(DEM, SFtracts_NAD)
plot(DEM_WGS_crop)
#plot together
plot(DEM_WGS_crop)
plot(st_geometry(SFtracts), add = T, col = NA)
DEM_WGS_crop_masked = mask(DEM_WGS_crop, SFtracts)
DEM_WGS_crop_masked
DEM_WGS_crop
DEM
plot(DEM_WGS_crop_masked)
plot(st_geometry(SFtracts), add = T, col = NA)
my_map <- tm_shape(DEM_WGS_crop_masked) +
tm_raster() +
tm_shape(SFtracts) +
tm_borders() +
# Set mode to interactive
tmap_mode("view")
my_map
?writeRaster
# get the elevation for every cell in each of the census tracts
elev = extract(DEM_WGS_crop, SFtracts)
len(elev)
length(elev)
nrow(SFtracts)
class(elev)
mean_elev = lapply(elev, mean, na.rm = T)
head(mean_elev)
unlist(mean_elev)
SFtracts$mean_elev <- unlist(mean_elev)
?extract
SFtracts
SFtracts$mean_elev = unlist(mean_elev)
#what did we get?
elev_map <- tm_shape(SFtracts) +
tm_polygons(col = 'mean_elev') +
tm_layout("The pain of biking in SF, by census tract",
inner.margins=c(0,0,.1,0), title.size=4.8)
elev_map
elev = extract(DEM_WGS_crop, SFtracts, fun=mean)
elev
#read in nlcd data
nlcd = raster('./data/nlcd2011_sf.tif')
#plot nlcd
plot(nlcd)
freq(nlcd)
barplot(nlcd)
st_crs(nlcd)
#reproject
nlcd_WGS = projectRaster(nlcd, projectExtent(nlcd, st_crs(SFtracts)$proj4string))
#check projection equality again
st_crs(nlcd_WGS)$epsg == st_crs(SFtracts)$epsg
plot(nlcd)
#crop
nlcd_WGS_crop = crop(nlcd_WGS, SFtracts)
plot(nlcd_WGS_crop)
plot(nlcd_WGS_crop)
str(nlcd)
str(DEM)
str(nlcd)
nlcd_WGS_crop@legend
nlcd_WGS_crop@legend = nlcd@legend
plot(nlcd_WGS_crop)
nlcd_WGS_crop@legend@colortable
nlcd_WGS_crop@legend@colortable[1]
nlcd_WGS_crop@legend@colortable[1] = '#FFFFFF'
plot(nlcd_WGS_crop)
nlcd_WGS_crop@legend@colortable[1] = '#000000'
plot(nlcd_WGS_crop)
str(DEM)
nlcd_WGS_crop@legend@colortable
?reclassify
reclass_vec <- c(0, 20, NA, # water will be set to NA (i.e. 'left out' of our analysis)
20, 21, 1, # we'll treat developed open space as greenspace, based on NLCD description
21, 30, 0, # developed and hardscape will have 0s
30, 31, NA,
31, Inf, 1) # greensapce will have 1s
reclass_vec
reclass_m <- matrix(reclass_vec, ncol = 3, byrow = TRUE)
reclass_m
nlcd_green <- reclassify(nlcd_WGS_crop, reclass_m)
plot(nlcd_green)
plot(nlcd_green)
nlcd_green
nlcd_green@data@values
nlcd_green@data@values[10000:]
nlcd_green@data@values[10000:12000]
freq(nlcd_green)
barplot(nlcd_green)
#extract the mean nlcd_simple values to tract polygons
greenspace = extract(nlcd_green, SFtracts, fun=mean)
greenspace
?extract
#extract the mean nlcd_simple values to tract polygons,
#this time setting na.rm to TRUE
greenspace = extract(nlcd_green, SFtracts, fun=mean, na.rm = T)
#and add to our SFtracts dataframe (which we can do because order is preserved)
SFtracts$prop_greenspace = greenspace
head(SFtracts)
#aggregate totvalue to SFtracts
SFtracts_w_mean_val = aggregate(x = SFhomes15_sf['totvalue'],
by = SFtracts,
FUN = mean)
#and add the totvalue column to our SFtracts dataframe
SFtracts$mean_totvalue = SFtracts_w_mean_val$totvalue
qtm(SFtracts_w_mean_val, fill = 'totvalue')
mod = lm(mean_totvalue ~ mean_elev + prop_greenspace, data = SFtracts)
summary(mod)
#(from http://climate.calcommons.org/dataset/monthly-summertime-fog)
#(units are in average hours per day)
karl_files = unique(gsub('.aux.xml', '', list.files('./data/CalMnYr')))
karl_files = karl_files[grep('flcc', karl_files)]
# Take  a look
karl_files
karl <- stack(paste0('./data/CalMnYr/', karl_files))
karl
#plot a few
plot(karl)
#what's the projection?
st_crs(karl)
karl_WGS = projectRaster(karl, projectExtent(karl, crs(st_crs(SFtracts)$proj4string)))
# check resultant CRS
st_crs(karl_WGS)$epsg == st_crs(SFtracts)$epsg
karl_WGS
# See the documentation!
?raster::brick
# Crop it to SFtracts
karl_WGS_crop = crop(karl_WGS, SFtracts)
# now let's make our same plot again
par(mfrow = c(1,2))
plot(karl_WGS[[7]])
plot(st_geometry(SFtracts), add = T, reset=F, key.pos = NULL, col = NA)
plot(karl_WGS_crop[[7]])
plot(st_geometry(SFtracts), add = T, reset = F, key.pos = NULL, col = NA)
?cellStats
cellStats(karl_WGS_crop)
cellStats(karl_WGS_crop, 'mean')
# Mean values
mean_karl_WGS_crop = mean(karl_WGS_crop)
mean_karl_WGS_crop
plot(mean_karl_WGS_crop)
plot(st_geometry(SFtracts), add = T, col = NA)
# This won't work
sd_karl_WGS_crop = sd(karl_WGS_crop)
