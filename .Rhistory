### LANDMAKRS
#Read in from a CSV
landmarks <- read.csv("./data/landmarks.csv")
#Convert to sf
landmarks_sf = st_as_sf(landmarks, coords = c('X', 'Y'), crs = 3857)
#Reproject to lonlat
landmarks_lonlat = st_transform(landmarks_sf, st_crs(SFhomes15_sf))
### SF BOUNDARY
#Read in from shapefile
SFboundary <- st_read('./data', 'SFboundary')
### SF HIGHWAYS
#Read in from shapefile
SFhighways = st_read('./data', 'SFhighways')
#Transform to lonlat
SFhighways_lonlat = st_transform(SFhighways, st_crs(SFhomes15_sf))
### SF CENSUS TRACTS
#Read in from shapefile
tracts = st_read(dsn = './data', layer = 'sftracts')
#Transform to lonlat
tracts_lonlat = st_transform(tracts, crs = 4326)
library(tmap)
?tm_symbols
tm_shape(tracts) + tm_polygons(col="beige", border.col="red", alpha = 0.4)
ttm()
tm_shape(tracts) + tm_polygons(col="beige", border.col="red", alpha = 0.4)
ttm()
tmap_mode('view')
tm_shape(SFhighways_lonlat) + tm_lines(col="black")
# Map the SF Boundary first
overlay_map = tm_shape(SFboundary) +
tm_polygons(col="beige", border.col="black") +
# Overlay the highway lines next
tm_shape(SFhighways_lonlat) +
tm_lines(col="black") +
# Then add the house points
tm_shape(SFhomes15_sf) +
tm_dots(col="totvalue", size=.25)
5
x = 5
x
overlay_map
overlay_map =
tm_shape(landmarks_lonlat) +
tm_dots(col = 'skyblue', size = 2)
overlay_map
# Map the SF Boundary first
overlay_map = tm_shape(SFboundary) +
tm_polygons(col="beige", border.col="black") +
# Overlay the highway lines next
tm_shape(SFhighways_lonlat) +
tm_lines(col="black") +
# Then add the house points
tm_shape(SFhomes15_sf) +
tm_dots(col="totvalue", size=.25)
overlay_map
ttm()
overlay_map
overlay_map +
tm_shape(landmarks_lonlat) +
tm_dots(col = 'skyblue', size = 2)
x+4
landmarks_lonlat
overlay_map +
tm_shape(landmarks_sf) +
tm_dots(col = 'skyblue', size = 2)
landmarks_sf
SFhomes15_sf_low2high <- SFhomes15_sf[order(SFhomes15_sf$totvalue, decreasing = FALSE),]
SFhomes15_sf_high2low <- SFhomes15_sf[order(SFhomes15_sf$totvalue, decreasing = TRUE),]
SFhomes15_sf_low2high <- SFhomes15_sf[order(SFhomes15_sf$totvalue, decreasing = FALSE),]
SFhomes15_sf_high2low <- SFhomes15_sf[order(SFhomes15_sf$totvalue, decreasing = TRUE),]
high2low = tm_shape(SFhomes15_sf_high2low) +
tm_dots(col='totvalue', size=1)
low2high = tm_shape(SFhomes15_sf_low2high) +
tm_dots(col='totvalue', size=1)
tmap_arrange(high2low, low2high)
library(sf)     # spatial objects and methods
library(tmap)   # mapping spatial objects
source('./docs/reload_part_01_data.R')
#highways are already in 26910!
st_crs(SFhighways)
#highways are already in 26910!
st_crs(SFhomes15_sf)
#so we can use them as the target CRS
SFhomes15_utm <- st_transform(SFhomes15_sf, st_crs(SFhighways))
# Check the CRS
st_crs(SFboundary) == st_crs(SFhomes15_utm)
# Transform
SFboundary_utm <- st_transform(SFboundary, st_crs(SFhomes15_utm))
# Check again
st_crs(SFboundary_utm) == st_crs(SFhomes15_utm)
bart_utm = st_transform(bart, st_crs(SFhighways))
bart_utm = st_transform(bart, st_crs(SFhighways))
bart
bart_sf
bart_utm = st_transform(bart_sf, st_crs(SFhighways))
st_crs(bart_utm)$epsg
st_crs(SFboundary_utm)$epsg
st_crs(SFhighways)$epsg
st_crs(SFhomes15_utm)$epsg
str(st_crs(bart_utm))
st_crs(bart_utm)$epsg
plot(SFboundary_utm)
lines(SFhighways, col='purple', lwd=4)
points(SFhomes15_utm)
plot(bart_utm, col="red", pch=15, add=T)
plot(st_geometry(SFboundary_utm))
plot(st_geometry(SFhighways), col='purple', lwd=4, add = T)
plot(st_geometry(SFhomes15_utm), add = T, pch = 19, cex = 0.5)
plot(st_geometry(bart_utm), col="skyblue", pch=19, cex = 1, add=T)
plot(st_geometry(SFboundary_utm))
plot(st_geometry(SFhighways), col='purple', lwd=4, add = T)
plot(st_geometry(SFhomes15), add = T, pch = 19, cex = 0.5)
plot(st_geometry(bart_utm), col="skyblue", pch=19, cex = 1, add=T)
plot(st_geometry(SFhomes15_sf), add = T, pch = 19, cex = 0.5)
plot(st_geometry(bart_utm), col="skyblue", pch=19, cex = 1, add=T)
plot(st_geometry(SFhomes15_utm), add = T, pch = 19, cex = 0.5)
plot(st_geometry(bart_utm), col="skyblue", pch=19, cex = 1, add=T)
plot(SFboundary_utm)
lines(SFhighways, col='purple', lwd=4)
head(iris)
class(iris)
type(iris)
typeof(iris)
iris$Sepal.Length
?st_area
SF_area = st_area(SFboundary_utm)
SF_area
class(SF_area)
typeof(SF_area)
SF_area / (1000 * 1000) # Convert to square KM
library(units)
set_units(SF_area, km^2)
set_units(SF_area, KM^2)
set_units(SF_area, Km^2)
set_units(SF_area, km^2)
valid_udunits()
View(valid_udunits())
set_units(SF_area, Hz^2)
set_units(SF_area, sr^2)
set_units(SF_area, km^2)
st_area(SFboundary)
st_length(SFhighways)
head(SFhighways)
SFhighways
SFhighways$geometry[[1]]
sum(st_length(SFhighways))
set_units(sum(st_length(SFhighways)), km)
lwgeom::st_perimeter(tracts)
st_perimeter(tracts)
?st_distance
bart_utm
bart_utm$STATION
bart_utm$STATION == 'EMBARCADERO'
bart_utm[bart_utm$STATION == 'EMBARCADERO',]
bart_utm[bart_utm$STATION == 'POWELL STREET',]
st_distance(bart_utm[bart_utm$STATION == 'EMBARCADERO',],
bart_utm[bart_utm$STATION == 'POWELL STREET',])
homes2embarc = st_distance(bart_utm[30,],SFhomes15_utm)
homes2embarc
dim(homes2embarc)
dim(st_distance(SFhomes15_sf, bart_utm[30,])
_
dim(st_distance(SFhomes15_sf, bart_utm[30,]))
dim(st_distance(SFhomes15_utm, bart_utm[30,]))
?st_within
bart_stations_in_SF <-st_within(bart_utm, SFboundary_utm, sparse=F)
head(bart_stations_in_SF)
bart_stations_in_SF
T %in% bart_stations_in_sf
T %in% bart_stations_in_SF
sum(bart_stations_in_SF)
bart_utm[bart_stations_in_sf, c('STATION')]#STATION
bart_utm[bart_stations_in_SF, c('STATION')]#STATION
bart_utm[bart_stations_in_SF,]$STATION
sfbart_utm = st_intersection(bart_utm, SFboundary_utm)
sfbart_utm
tmap_mode("view")
tm_shape(SFboundary_utm) +
tm_polygons(col="beige", border.col="black") +
tm_shape(sfbart_utm) +
tm_dots(col="red")
sftracts = st_read(dsn='./data', layer='sftracts_wpop')
plot(sftracts['POP'])
head(sftracts)
plot(sftracts)
plot(sftracts['pop14'])
plot(sftracts['ALAND'])
plot(sftracts['pop14'])
homes_with_tracts <- st_within(SFhomes15_utm, sftracts)
# What is the CRS of the property data?
st_crs(SFhomes15_utm)
# What is the CRS of the census tracts?
st_crs(sftracts)
#transform to UTM
sftracts_utm = st_transform(sftracts, st_crs(SFhomes15_utm))
# make sure the CRSs are the same
st_crs(sftracts_utm) == st_crs(SFhomes15_utm)
homes_with_tracts <- st_within(SFhomes15_utm, sftracts_utm)
class(homes_with_tracts)
length(homes_with_tracts)
nrow(sftracts_utm)
nrow(SFhomes15_utm)
homes_with_tracts
?st_within
st_within(SFhomes15_utm, sftracts_utm)
st_within(SFhomes15_utm, sftracts_utm, sparse=F)
st_within(SFhomes15_utm, sftracts_utm)
head(homes_with_tracts)
unlist(homes_with_tracts)
sftracts_utm[unlist(homes_with_tracts),]
sftracts_utm[unlist(homes_with_tracts),]$GEOID
SFhomes15_utm$home_geoid <- sftracts_utm[unlist(homes_with_tracts),]$GEOID
head(SFhomes15_utm, 2)
join_map = tm_shape(sftracts_utm) +
tm_polygons() +
tm_shape(SFhomes15_utm) +
tm_dots(col = 'home_geoid', size = 0.25)
#Note that tmap bins our tracts because we have so many
join_map
med_hh_inc <- read.csv("data/sf_med_hh_income2015.csv", stringsAsFactors = F,
colClasses = c("character","numeric"))
head(med_hh_inc)
#make sure we're using `base` `merge` (because multiple other packages
#that you might have read in also have a `merge` function)
SFhomes15_utm <- base::merge(SFhomes15_utm,
med_hh_inc, by.x="home_geoid", by.y="GEOID")
head(SFhomes15_utm, 2) # Look for the col medhhinc
tmap_mode("view")
tm_shape(sftracts_utm) + tm_polygons() +
tm_shape(SFhomes15_utm) + tm_dots(col="medhhinc")
?sf::aggregate.sf
SFhomes15_utm["totvalue"]
tracts_with_mean_val <- aggregate(x = SFhomes15_utm["totvalue"],
by = sftracts_utm,
FUN = mean)
class(tracts_with_mean_val)
head(tracts_with_mean_val, 2)
nrow(tracts_with_mean_val) == nrow(sftracts_utm)
sftracts_utm$mean_totvalue <- tracts_with_mean_val$totvalue
head(sftracts_utm, 2) # check it
mean_totvalue_choropleth =
tm_shape(sftracts_utm) +
tm_polygons(col="mean_totvalue", border.col=NA)
mean_totvalue_choropleth
View(SFboundary)
source('./docs/reload_part_01_data.R')
?st_buffer
bart_utm
bart_utm <- st_transform(bart_sf, crs=26910)
#so we can use them as the target CRS
SFhomes15_utm <- st_transform(SFhomes15_sf, st_crs(SFhighways))
sfbart_utm = st_intersection(bart_utm, SFboundary_utm)
# Transform
SFboundary_utm <- st_transform(SFboundary, st_crs(SFhomes15_utm))
sfbart_utm = st_intersection(bart_utm, SFboundary_utm)
head(sfbart_utm)
#remember: our units are meters!
bart_1km_buffer <- st_buffer(sfbart_utm, dist=1000)
tm_shape(bart_1km_buffer) + tm_polygons(col="red") +
tm_shape(sfbart_utm) + tm_dots()
library(tmap)
tm_shape(bart_1km_buffer) + tm_polygons(col="red") +
tm_shape(sfbart_utm) + tm_dots()
ttm()
tm_shape(bart_1km_buffer) + tm_polygons(col="red") +
tm_shape(sfbart_utm) + tm_dots()
SFhomes_near_bart <-st_intersection(SFhomes15_utm, bart_1km_buffer)
# Take a look
head(SFhomes_near_bart)
tm_shape(bart_1km_buffer) + tm_borders(col="red") +
tm_shape(sfbart_utm) + tm_dots() +
tm_shape(SFhomes_near_bart) +
tm_dots(col = 'green', size = 0.03)
tm_shape(bart_1km_buffer) + tm_polygons(border.col="red", alpha=0) +
tm_shape(sfbart_utm) + tm_dots() +
tm_shape(SFhomes_near_bart) +
tm_dots(col = 'green', size = 0.03)
library(sf)     # simple features objects and methods
library(tmap)   # mapping spatial objects
library(raster) # reading in and operating on rasters
# Read in the 'sftracts_wpop' shapefile
SFtracts <- st_read("./data", "sftracts_wpop")
# Read in from CSV file
SFhomes <- read.csv('./data/sf_properties.csv',
stringsAsFactors = FALSE)
# subset the data
SFhomes15 <- subset(SFhomes, as.numeric(SalesYear) == 2015)
# coerce to an `sf` object
SFhomes15_sf <- st_as_sf(SFhomes15, coords = c('lon', 'lat'),
crs = 4326)
#Reproject to the SFtracts projection
#NOTE: We're overwriting the previous SFhomes15_sf object here! This is
#fine to do if we want, but we should always beware.
SFhomes15_sf = st_transform(SFhomes15_sf, st_crs(SFtracts))
#check projection equality
st_crs(SFhomes15_sf) == st_crs(SFtracts)
#read in a Bay Area DEM (Digital Elevation Model)
#(from http://www.webgis.com/terr_pages/CA/dem1/sanfrancisco.html)
DEM = raster('./data/san_francisco-e.DEM')
plot(iris)
plot(SFtracts)
plot(DEM)
SFtracts
DEM
str(DEM)
DEM@extent
str(DEM@extent)
DEM@extent@xmin
DEM@crs
st_crs(SFtracts)
DEM@ncols
class(DEM)
typeof(DEM)
DEM
(DEM@extent@xmax - DEM@extent@xmin) / DEM@ncols
(DEM@extent@ymax - DEM@extent@ymin) / DEM@nrows
DEM@data
str(DEM@data)
DEM@data@values
plot(DEM)
DEM[10:15, 20:30]
DEM[,]
#coerce our whole raser's dataset to a matrix, with the appropriate number
#of columns, and
matrix(DEM[,], ncol = ncol(DEM), byrow = TRUE)
test = raster(matrix(DEM[,], ncol = ncol(DEM), byrow = TRUE))
test
test@data
DEM[10:15, 20:30, drop = FALSE]
test = DEM[10:15, 20:30, drop = FALSE]
plot(test)
test@data@values
DEM@crs
st_crs(DEM)
#or just its proj4string
proj4string(DEM)
#reproject tracts to our DEM projection
SFtracts_NAD = st_transform(SFtracts, st_crs(DEM))
DEM_WGS = projectRaster(DEM, projectExtent(DEM, st_crs(SFtracts)))
?projectExtent
DEM_WGS = projectRaster(DEM, projectExtent(DEM, st_crs(SFtracts)$proj4string))
st_crs(SFtracts_NAD) == st_crs(DEM)
st_crs(DEM_WGS) == st_crs(SFtracts)
SFhomes15_sp = as_Spatial(SFhomes15_sf)
SFhomes15_sp
str(SFhomes15_sp)
plot(SFhomes15_sp)
# clip the WGS CRS version of the rasters to SFtracts
DEM_WGS_crop = crop(DEM_WGS, SFtracts)
# Clip the NAD CRS version
DEM_crop = crop(DEM, SFtracts_NAD)
plot(DEM_WGS_crop)
plot(DEM)
plot(DEM_WGS_crop)
#plot together
plot(DEM_WGS_crop)
plot(st_geometry(SFtracts), add = T, col = NA)
DEM_WGS_crop_masked = mask(DEM_WGS_crop, SFtracts)
DEM_WGS_crop_masked
plot(DEM_WGS_crop_masked)
DEM
DEM_WGS
DEM_WGS_crop
DEM_WGS_crop_masked
my_map <- tm_shape(DEM_WGS_crop_masked) +
tm_raster() +
tm_shape(SFtracts) +
tm_borders() +
# Set mode to interactive
tmap_mode("view")
my_map
?writeRaster
#write our reprojected, cropped data to the data directory, using the Geotiff format
#(and allow R to overwrite if file already exists)
writeRaster(DEM_WGS_crop_masked, filename="./data/DEM_reproject_crop.tif", format="GTiff", overwrite = T)
# get the elevation for every cell in each of the census tracts
elev = extract(DEM_WGS_crop, SFtracts)
length(elev)
nrow(SFtracts)
mean_elev = lapply(elev, mean, na.rm = T)
head(mean_elev)
unlist(mean_elev)
SFtracts$mean_elev = unlist(mean_elev)
head(SFtracts)
#what did we get?
elev_map <- tm_shape(SFtracts) +
tm_polygons(col = 'mean_elev') +
tm_layout("The pain of biking in SF, by census tract",
inner.margins=c(0,0,.1,0), title.size=4.8)
elev_map
?extract
elev = extract(DEM_WGS_crop, SFtracts, fun=mean)
#what did that give us?
head(elev)
nlcd = raster('./data/nlcd2011_sf.tif')
#plot nlcd
plot(nlcd)
freq(nlcd)
barplot(nlcd)
hist(DEM)
barplot(nlcd)
nlcd_WGS = projectRaster(nlcd, projectExtent(nlcd, st_crs(SFtracts)$proj4string))
nlcd_WGS_crop = crop(nlcd_WGS, SFtracts)
#check projection equality again
st_crs(nlcd_WGS)$epsg == st_crs(SFtracts)$epsg
#check projection equality again
st_crs(nlcd_WGS) == st_crs(SFtracts)
plot(nlcd_WGS_crop)
nlcd@legend
nlcd_WGS@legend
nlcd_WGS_crop@legend = nlcd@legend
plot(nlcd_WGS_crop)
?projectRaster
#reproject again, this time using nearest-neighbor interpolation
nlcd_WGS = projectRaster(nlcd, projectExtent(nlcd, st_crs(SFtracts)$proj4string),
method='ngb')
#check projection equality again
st_crs(nlcd_WGS) == st_crs(SFtracts)
#crop again
nlcd_WGS_crop = crop(nlcd_WGS, SFtracts)
#grab our legend again
nlcd_WGS_crop@legend = nlcd@legend
#plot to check again
plot(nlcd_WGS_crop)
?reclassify
reclass_vec <- c(0, 20, NA, # water will be set to NA (i.e. 'left out' of our analysis)
20, 21, 1, # we'll treat developed open space as greenspace, based on NLCD description
21, 30, 0, # developed and hardscape will have 0s
30, 31, NA,
31, Inf, 1) # greensapce will have 1s
reclass_vec
reclass_m <- matrix(reclass_vec, ncol = 3, byrow = TRUE)
reclass_m
nlcd_green <- reclassify(nlcd_WGS_crop, reclass_m)
freq(nlcd_green)
barplot(nlcd_green)
plot(nlcd_green)
greenspace = extract(nlcd_green, SFtracts)
greenspace
lapply(greenspace, mean, na.rm=T)
greenspace = lapply(greenspace, mean, na.rm=T)
greenspace
mean(c(1,2,3,NA))
mean(c(1,2,3,NA), na.rm=T)
unlist(greenspace)
?raster::extract
#and add to our SFtracts dataframe (which we can do because order is preserved)
SFtracts$prop_greenspace = greenspace
head(SFtracts)
tm_shape(SFtracts) + tm_polygons(col='prop_greenspace')
tm_shape(SFtracts) + tm_polygons(col='prop_greenspace')
#aggregate totvalue to SFtracts
SFtracts_w_mean_val = aggregate(x = SFhomes15_sf['totvalue'],
by = SFtracts,
FUN = mean)
#and add the totvalue column to our SFtracts dataframe
SFtracts$mean_totvalue = SFtracts_w_mean_val$totvalue
qtm(SFtracts_w_mean_val, fill = 'totvalue')
qtm(SFtracts_w_mean_val, fill = 'prop_greenspace')
mod = lm(mean_totvalue ~ mean_elev + prop_greenspace, data = SFtracts)
#extract the mean nlcd_simple values to tract polygons,
#this time setting na.rm to TRUE
greenspace = extract(nlcd_green, SFtracts, fun=mean, na.rm = T)
#and add to our SFtracts dataframe (which we can do because order is preserved)
SFtracts$prop_greenspace = greenspace
qtm(SFtracts_w_mean_val, fill = 'prop_greenspace')
mod = lm(mean_totvalue ~ mean_elev + prop_greenspace, data = SFtracts)
summary(mod)
#(from http://climate.calcommons.org/dataset/monthly-summertime-fog)
#(units are in average hours per day)
karl_files = unique(gsub('.aux.xml', '', list.files('./data/CalMnYr')))
karl_files = karl_files[grep('flcc', karl_files)]
# Take  a look
karl_files
karl <- stack(paste0('./data/CalMnYr/', karl_files))
# look at what we made!
karl
#plot a few
plot(karl)
#what's the projection?
st_crs(karl)
karl_WGS = projectRaster(karl, projectExtent(karl, st_crs(SFtracts)$proj4string))
# check resultant CRS
st_crs(karl_WGS) == st_crs(SFtracts)
karl_WGS
# See the documentation!
?raster::brick
# Crop it to SFtracts
karl_WGS_crop = crop(karl_WGS, SFtracts)
# now let's make our same plot again
par(mfrow = c(1,2))
plot(karl_WGS[[7]])
plot(st_geometry(SFtracts), add = T, reset=F, key.pos = NULL, col = NA)
plot(karl_WGS_crop[[7]])
plot(st_geometry(SFtracts), add = T, reset = F, key.pos = NULL, col = NA)
# Mean values
mean_karl_WGS_crop = mean(karl_WGS_crop)
mean_karl_WGS_crop
plot(mean_karl_WGS_crop)
plot(st_geometry(SFtracts), add = T, col = NA)
# This won't work
sd_karl_WGS_crop = sd(karl_WGS_crop)
sd_karl_WGS_crop = calc(karl_WGS_crop, sd)
#plot that too
par(mfrow = c(1,2))
plot(mean_karl_WGS_crop, main="mean summer fog hours")
plot(st_geometry(SFtracts), add = T, reset=F, key.pos=NULL, col = NA)
plot(sd_karl_WGS_crop, main="sd summer fog hours")
plot(st_geometry(SFtracts), add = T, reset=F, key.pos=NULL, col = NA)
SFtracts$mean_karl = extract(mean_karl_WGS_crop, SFtracts, mean)
# Linear regression model
mod = lm(mean_karl ~ mean_elev, data = SFtracts)
