head(sftracts_utm, 2) # check it
choropleth =
tm_shape(sftracts_utm) +
tm_polygons(col="mean_totvalue", border.col=NA)
choropleth
choropleth + tm_shape(sfhomes15_utm) + tm_dots(col = 'totvalue')
ttm()
choropleth + tm_shape(sfhomes15_utm) + tm_dots(col = 'totvalue')
?st_buffer
#remember: our units are meters!
bart_1km_buffer <- st_buffer(sfbart_utm, dist=1000)
#remember: our units are meters!
bart_1km_buffer <- st_buffer(bart_utm, dist=1000)
tm_shape(bart_1km_buffer) + tm_polygons(col="red") +
tm_shape(sfbart_utm) + tm_dots()
sfbart_utm = bart_utm
tm_shape(bart_1km_buffer) + tm_polygons(col="red") +
tm_shape(sfbart_utm) + tm_dots()
sfbart_utm = st_intersection(bart_utm, sfboundary_utm)
tm_shape(bart_1km_buffer) + tm_polygons(col="red") +
tm_shape(sfbart_utm) + tm_dots()
#return non-sparse, to see full structure better
homes_near_bart <-  st_intersects(sfhomes15_utm, bart_1km_buffer, sparse=F)
class(homes_near_bart)
dim(homes_near_bart)
head(homes_near_bart,3)
#buffer the whole BART system as a single geometry (a multipolygon)
bart_sys_1km_buffer <- st_buffer(st_combine(sfbart_utm), dist=1000)
#intersect the BART system and the homes
homes_near_bart <-  st_intersects(sfhomes15_utm, bart_sys_1km_buffer, sparse=F)
dim(homes_near_bart)
sfhomes15_utm_near_bart <- sfhomes15_utm[unlist(homes_near_bart),]
homes_near_bart_map = tm_shape(sfboundary_utm) +
tm_polygons() +
tm_shape(bart_sys_1km_buffer) +
tm_polygons(col = 'red') +
tm_shape(sfhomes15_utm_near_bart) +
tm_dots(col = 'black', size = 0.1)
homes_near_bart_map
#Neat, huh?
tmap_last() +
tm_shape(st_intersection(sfhomes15_utm, st_buffer(bart_utm, 1000))) +
tm_dots(col = 'green', size = 0.1)
library(sf)     # simple features objects and methods
library(tmap)   # mapping spatial objects
library(raster) # reading in and operating on rasters
# Read in from CSV file
sfhomes <- read.csv('./data/sf_properties.csv',
stringsAsFactors = FALSE)
# subset the data
sfhomes15 <- subset(sfhomes, as.numeric(SalesYear) == 2015)
# coerce to an `sf` object
sfhomes15_sf <- st_as_sf(sfhomes15, coords = c('lon', 'lat'),
crs = 4326)
# Read in the 'sftracts_wpop' shapefile
sftracts <- st_read("./data", "sftracts_wpop")
#Reproject to the sftracts projection
#NOTE: We're overwriting the previous sfhomes15_sf object here! This is
#fine to do if we want, but we should always beware.
sfhomes15_sf = st_transform(sfhomes15_sf, st_crs(sftracts))
#check projection equality
st_crs(sfhomes15_sf) == st_crs(sftracts)
#read in a Bay Area DEM (Digital Elevation Model)
#(from http://www.webgis.com/terr_pages/CA/dem1/sanfrancisco.html)
DEM = raster('./data/san_francisco-e.DEM')
#plot it
plot(DEM)
DEM
DEM
class(DEM)
type(DEM)
typeof(DEM)
str(DEM)
DEM@extent
str(DEM@extent)
DEM@extent@xmin
DEM@crs
DEM@ncols
DEM
(DEM@extent@xmax - DEM@extent@xmin) / DEM@ncols
(DEM@extent@ymax - DEM@extent@ymin) / DEM@nrows
DEM
str(DEM@data)
DEM@data@values
str(DEM@data)
str(DEM@data)
DEM@data@values
str(DEM@data)
DEM@data@values
DEM[10:15, 20:30]
#coerce our whole raser's dataset to a matrix, with the appropriate number
#of columns, and
matrix(DEM[,], ncol = ncol(DEM), byrow = TRUE)
#coerce our whole raser's dataset to a matrix, with the appropriate number
#of columns, and
dim(matrix(DEM[,], ncol = ncol(DEM), byrow = TRUE))
#coerce our whole raser's dataset to a matrix, with the appropriate number
#of columns, and
raster(matrix(DEM[,], ncol = ncol(DEM), byrow = TRUE))
DEM[10:15, 20:30, drop = FALSE]
plot(DEM[10:15, 20:30, drop = FALSE]()
)))
plot(DEM[10:15, 20:30, drop = FALSE])
test@data@values
test = DEM[10:15, 20:30, drop = FALSE]
plot(test)
test@data@values
#check out its projection
proj4string(DEM)
st_crs(DEM)
st_crs(DEM)
#check out its projection
proj4string(DEM)
#reproject tracts to our DEM projection
sftracts_NAD = st_transform(sftracts, st_crs(DEM))
DEM_WGS = projectRaster(DEM, projectExtent(DEM, st_crs(sftracts)))
?projectRaster
class(crs(st_crs(sftracts)$proj4string))
DEM_WGS = projectRaster(DEM, projectExtent(DEM, crs(st_crs(sftracts)$proj4string)))
DEM_WGS
DEN
DEM
st_crs(sftracts_NAD) == st_crs(DEM)
st_crs(DEM_WGS) == st_crs(sftracts)
sfhomes15_sp = as_Spatial(sfhomes15_sf)
sfhomes15_sp
str(sfhomes15_sp)
sfhomes15_sfagain = st_as_sf(sfhomes15_sp)
plot(sfhomes15_sfagain['totvalue'])
# clip the WGS CRS version of the rasters to sftracts
DEM_WGS_crop = crop(DEM_WGS, sftracts)
# Clip the NAD CRS version
DEM_crop = crop(DEM, sftracts_NAD)
plot(DEM_WGS_crop)
plot(DEM)
plot(DEM_WGS_crop)
#plot together
plot(DEM_WGS_crop)
plot(sftracts, add = T, col = NA)
DEM_WGS_crop_masked = mask(DEM_WGS_crop, sftracts)
DEM_WGS_crop_masked
DEM_WGS_crop
plot(DEM_WGS_crop_masked)
plot(sftracts, add = T, col = NA)
my_map <- tm_shape(DEM_WGS_crop_masked) +
tm_raster() +
tm_shape(sftracts) +
tm_borders() +
# Set mode to interactive
tmap_mode("view")
my_map <- tm_shape(DEM_WGS_crop_masked) +
tm_raster() +
tm_shape(sftracts) +
tm_borders() +
# Set mode to interactive
tmap_mode("view")
my_map
#write our reprojected, cropped data to the data directory, using the Geotiff format
#(and allow R to overwrite if file already exists)
writeRaster(DEM_WGS_crop_masked, filename="./data/DEM_reproject_crop.tif", format="GTiff", overwrite = T)
list.files('./data')
# get the elevation for every cell in each of the census tracts
elev = extract(DEM_WGS_crop, sftracts)
#what did that give us?
head(elev)
length(elev)
nrow(sftracts)
mean_elev = lapply(elev, mean, na.rm = T)
head(mean_elev)
sftracts$mean_elev = unlist(mean_elev)
#what did we get?
elev_map <- tm_shape(sftracts) +
tm_polygons(col = 'mean_elev') +
tm_layout("The pain of biking in SF, by census tract",
inner.margins=c(0,0,.1,0), title.size=4.8)
elev_map
?extract
elev = extract(DEM_WGS_crop, sftracts, fun=mean)
#what did that give us?
head(elev)
#read in nlcd data
nlcd = raster('./data/nlcd2011_sf.tif')
#plot nlcd
plot(nlcd)
freq(nlcd)
barplot(nlcd)
#plot nlcd
plot(nlcd)
#check projection equality
st_crs(nlcd) == st_crs(sftracts)
#reproject
nlcd_WGS = projectRaster(nlcd, projectExtent(nlcd, crs(st_crs(sftracts)$proj4string)))
#check projection equality again
st_crs(nlcd_WGS) == st_crs(sftracts)
#crop
nlcd_WGS_crop = crop(nlcd_WGS, sftracts)
plot(nlcd_WGS_crop)
nlcd_WGS_crop@legend
nlcd@legend
nlcd_WGS_crop@legend = nlcd@legend
plot(nlcd_WGS_crop)
?reclassify
reclass_vec <- c(0, 20, NA, # water will be set to NA (i.e. 'left out' of our analysis)
20, 21, 1, # we'll treat developed open space as greenspace, based on NLCD description
21, 30, 0, # developed and hardscape will have 0s
30, 31, NA,
31, Inf, 1) # greensapce will have 1s
reclass_vec
reclass_m <- matrix(reclass_vec, ncol = 3, byrow = TRUE)
reclass_m
nlcd_green <- reclassify(nlcd_WGS_crop, reclass_m)
freq(nlcd_green)
barplot(nlcd_green)
plot(nlcd_green)
greenspace = extract(nlcd_green, sftracts, fun=mean)
greenspace
plot(nlcd)
greenspace = extract(nlcd_green, sftracts, fun=mean, na.rm = T)
sftracts$prop_greenspace = greenspace
head(sftracts)
sftracts_w_mean_val = aggregate(x = sfhomes15_sf['totvalue'],
by = sftracts,
FUN = mean)
#and add the totvalue column to our sftracts dataframe
sftracts$mean_totvalue = sftracts_w_mean_val$totvalue
qtm(sftracts_w_mean_val, fill = 'totvalue')
mod = lm(mean_totvalue ~ mean_elev + prop_greenspace, data = sftracts)
summary(mod)
sfhomes15_sample = sfhomes15_sf[sample(seq(nrow(sfhomes15_sf)),
replace = FALSE, size = 2000), ]
#reproject
sfhomes15_utm <- st_transform(sfhomes15_sample, 26910)
DEM_utm = projectRaster(DEM,
projectExtent(DEM,
crs(st_crs(sfhomes15_utm)$proj4string)))
nlcd_green_utm = projectRaster(nlcd_green,
projectExtent(nlcd_green,
crs(st_crs(sfhomes15_utm)$proj4string)))
#check projections
st_crs(sfhomes15_utm) == st_crs(DEM_utm)
st_crs(sfhomes15_utm) == st_crs(nlcd_green_utm)
#create buffer
sfhomes15_utm_buff = st_buffer(sfhomes15_utm, dist = 100)
#sum the greenspace within the buffers
#NOTE: This will take a couple minutes to run...
greenspace_homes = extract(nlcd_green_utm, sfhomes15_utm_buff, fun = mean, na.rm = T)
#add that as a column in our sfhomes15_utm dataframe
sfhomes15_utm$greenspace = greenspace_homes
#extract the elevation to the homes
#NOTE: no need for fun or na.rm arguments here, because the homes
#and points, not polygons, so only a single cell will extract to each
elev_homes = extract(DEM_utm, sfhomes15_utm)
#add that as a column in our sfhomes15_utm dataframe too
sfhomes15_utm$elev = elev_homes
mod = lm(totvalue ~ elev + greenspace, data = sfhomes15_utm)
summary(mod)
list.files('./data/CalMnYr/')
#(from http://climate.calcommons.org/dataset/monthly-summertime-fog)
#(units are in average hours per day)
karl_files = unique(gsub('.aux.xml', '', list.files('./data/CalMnYr')))
karl_files = karl_files[grep('flcc', karl_files)]
# Take  a look
karl_files
karl <- stack(paste0('./data/CalMnYr/', karl_files))
# look at what we made!
karl
#plot a few
plot(karl[[7:9]])
karl_WGS = projectRaster(karl, projectExtent(karl, crs(st_crs(sftracts)$proj4string)))
# check resulting CRS
st_crs(karl_WGS) == st_crs(sftracts)
karl_WGS
# See the documentation!
?raster::brick
# Crop it to sftracts
karl_WGS_crop = crop(karl_WGS, sftracts)
# Mean values
mean_karl_WGS_crop = mean(karl_WGS_crop)
mean_karl_WGS_crop
plot(mean_karl_WGS_crop)
plot(sftracts, add = T, col = NA)
# This won't work
sd_karl_WGS_crop = sd(karl_WGS_crop)
sd_karl_WGS_crop = calc(karl_WGS_crop, sd)
#plot that too
par(mfrow = c(1,2))
plot(mean_karl_WGS_crop)
plot(sftracts, add = T, reset=F, key.pos=NULL, col = NA)
plot(sd_karl_WGS_crop)
plot(sftracts, add = T, reset=F, key.pos=NULL, col = NA)
install.packages(
c("ggplot2", "ggmap", "sf", "units", "tmap", "nngeo", "raster"),
dependencies=TRUE)
sfhomes <- read.csv('data/sf_properties_25ksample.csv',
stringsAsFactors = FALSE)
# Take a look at first 5 rows and a few of the columns
sfhomes[1:5,c("YearBuilt","totvalue","AreaSquareFeet","Neighborhood",
"NumBedrooms")]
plot(sfhomes$lon, sfhomes$lat) # using base plot function
bart <- read.csv("./data/bart.csv")
# take a look
head (bart)
sfhomes15 <- subset(sfhomes_high2low, as.numeric(SalesYear) == 2015)
sfhomes_high2low <- sfhomes[order(sfhomes$totvalue, decreasing = T),]
ggplot() + geom_point(data=sfhomes_high2low, aes(lon,lat, col=totvalue)) +
coord_map()
library(ggplot2)
ggplot() + geom_point(data=sfhomes, aes(lon,lat))
sfhomes_high2low <- sfhomes[order(sfhomes$totvalue, decreasing = T),]
ggplot() + geom_point(data=sfhomes_high2low, aes(lon,lat, col=totvalue)) +
coord_map()
sfhomes15 <- subset(sfhomes_high2low, as.numeric(SalesYear) == 2015)
sfmap_with_bart <- ggplot() +
geom_point(data=sfhomes15, aes(x=lon, y=lat, col=totvalue))  +
geom_point(data=bart, aes(x=X,y=Y), col="red", size=3)
landmarks <- read.csv("./data/landmarks.csv")
head(landmarks)
sfmap_bart_landmarks <- ggplot() +
geom_point(data=sfhomes15, aes(x=lon, y=lat))  +
geom_point(data=bart[bart$CO=='SF',], aes(x=X,y=Y), col="red", size=3) +
geom_point(data=landmarks, aes(x=X,y=Y), shape=22,
col="black", fill="grey", size=4)
ggplot() +
geom_point(data=landmarks, aes(x=X,y=Y), shape=22,
col="black", fill="grey", size=4)
library(sf)
dir("data", pattern = "sftracts.")
tracts = st_read(dsn = './data', layer = 'sftracts')
#the object displays a compact summary, when its name is called
tracts
plot(tracts)
#read in a shapefile of SF census tracts
plot(tracts['NAME'])
tracts$geometry
tracts$geometry[[1]]
st_crs(tracts)
bbox = st_bbox(tracts)
bbox
bbox$xmin
class(tracts$geometry)
class(tracts$geometry[[1]])
plot(tracts$geometry)
plot(tracts['geometry'])
plot(tracts$geometry)
tracts$geometry[[1]]
tracts$geometry[[2]]
tracts$geometry[[3]]
tracts$geometry[[4]]
tracts$geometry[[5]]
tracts$geometry[[6]]
tracts$geometry[[7]]
tracts$geometry[[8]]
tracts$geometry[[9]]
ggplot() + geom_sf(data = tracts) +
geom_point(data = sfhomes15, aes(lon, lat, col = totvalue))
st_crs(4326)
sfhomes15_sf = st_as_sf(sfhomes15, coords = c('lon', 'lat'), crs = 4326)
st_crs(SFhomes15_sf)
SFhomes15_sf = st_as_sf(SFhomes15, coords = c('lon', 'lat'), crs = 4326)
SFhomes15_sf = st_as_sf(sfhomes15, coords = c('lon', 'lat'), crs = 4326)
SFhomes15_sf
st_crs(SFhomes15_sf)
tracts_lonlat = st_transform(tracts, crs = 4326)
tracts_lonlat = st_transform(tracts, crs = st_crs(SFhomes15_sf)$epsg)
st_crs(SFhomes15_sf)
st_crs(tracts_lonlat)
st_crs(SFhomes15_sf) == st_crs(tracts_lonlat)
ggplot() + geom_sf(data = tracts_lonlat) +
geom_sf(data = SFhomes15_sf, aes(col = totvalue))
ggplot() + geom_sf(data = tracts_lonlat) +
geom_sf(data = SFhomes15_sf, aes(col = totvalue))
landmarks_sf = st_as_sf(landmarks, coords = c('X', 'Y'), crs = 3857)
SFboundary = st_read('./data', 'sfboundary')
SFhighways = st_read('./data', 'sfhighways')
#check the CRS of sfboundary
st_crs(SFboundary) == st_crs(SFhomes15_sf)
#check th CRS of sfhighways
st_crs(SFhighways) == st_crs(SFhomes15_sf)
#it needs to be transformed
SFhighways_lonlat = st_transform(SFhighways, st_crs(SFhomes15_sf))
landmarks_lonlat = st_transform(landmarks_sf, st_crs(SFhomes15_sf))
challenge_map = ggplot() +
geom_sf(data = SFboundary, col = 'purple') +
geom_sf(data = tracts_lonlat, alpha = 0.2) +  #alpha = 0.2 for transparency, so we can see sfboundary
geom_sf(data= SFhighways_lonlat, col = 'red') +
geom_sf(data = SFhomes15_sf, aes(col = totvalue)) +
geom_sf(data = landmarks_sf, col = 'red')
challenge_map
library(tmap)
qtm(SFhomes15_sf)
install.packages('tmap')
library(tmap)
install.packages('tmaptools')
install.packages('tmaptools')
library(tmap)
install.packages('tmaptools')
library(sf)     # spatial objects and methods
library(tmap)   # mapping spatial objects
remove.packages('lwgeom')
install.packages('lwgeom')
install.packages('tmaptools')
install.packages('tmap')
library(tmap)
library(sf)     # spatial objects and methods
library(tmap)   # mapping spatial objects
# Read in from CSV file
SFhomes <- read.csv('data/sf_properties_25ksample.csv',
stringsAsFactors = FALSE)
# subset the data
SFhomes15 <- subset(SFhomes, as.numeric(SalesYear) == 2015)
# convert to an `sf` object with a defined CRS (WGS84)
SFhomes15_sf <- st_as_sf(SFhomes15, coords = c('lon', 'lat'),
crs = 4326)
# Read in the Bart data from CSV file
bart <- read.csv("./data/bart.csv", stringsAsFactors = F)
bart_sf <- st_as_sf(bart, coords = c('X', 'Y'), crs = 4326)
landmarks <- read.csv("./data/landmarks.csv")
landmarks_sf = st_as_sf(landmarks, coords = c('X', 'Y'), crs = 3857)
landmarks_lonlat = st_transform(landmarks_sf, st_crs(4326))
#or
#landmarks_lonlat = st_transform(landmarks_sf, st_crs(SFhomes15_sf))
SFboundary <- st_read('./data', 'SFboundary')
SFhighways = st_read('./data', 'SFhighways')
st_crs(SFhighways)
SFhighways_lonlat = st_transform(SFhighways, st_crs(SFhomes15_sf))
tracts = st_read(dsn = './data', layer = 'sftracts')
tracts_lonlat = st_transform(tracts, crs = 4326)
#highways are already in 26910!
st_crs(SFhighways)
#so we can use them as the target CRS
SFhomes15_utm <- st_transform(SFhomes15_sf, st_crs(SFhighways))
#OR we could just use the EPSG code directly
#SFhomes15_utm <- st_transform(SFhomes15_sf, 26910)
# Check the CRS
st_crs(SFboundary) == st_crs(SFhomes15_utm)
# Transform
SFboundary_utm <- st_transform(SFboundary, st_crs(SFhomes15_utm))
# Check again
st_crs(SFboundary_utm) == st_crs(SFhomes15_utm)
# Transform Bart to UTM
bart_utm <- st_transform(bart_sf, st_crs(SFhomes15_utm))
st_crs(bart_utm)$epsg
st_crs(SFboundary_utm)$epsg
st_crs(SFhighways)$epsg
st_crs(SFhomes15_utm)$epsg
plot(SFboundary_utm)
lines(SFhighways, col='purple', lwd=4)
points(SFhomes15_utm)
plot(bart_utm, col="red", pch=15, add=T)
plot(st_geometry(SFboundary_utm))
plot(st_geometry(SFhighways), col='purple', lwd=4, add = T)
plot(st_geometry(SFhomes15_utm), add = T, pch = 19, cex = 0.5)
plot(st_geometry(bart_utm), col="skyblue", pch=19, cex = 1, add=T)
challenge_map = tm_shape(SFboundary) +
tm_polygons() +
tm_shape(SFhighways) +
tm_lines(col = 'purple', lwd = 4) +
tm_shape(SFhomes15_sf) +
tm_dots(col = 'black', size = 0.5) +
tm_shape(bart_utm) +
tm_dots(col = 'skyblue', size = 1)
tmap_mode('plot')
challenge_map
tmap_mode('view')
challenge_map
sf_area = st_area(SFboundary_utm)
sf_area
sf_area / (1000 * 1000) # Convert to square KM
library(units)
set_units(sf_area, km^2)
set_units(sf_area, km^3)
set_units(sf_area, km*2)
set_units(sf_area, sqkm)
head(valid_udunits(), 2)
st_area(SFboundary)
st_area(SFboundary_utm)
?st_area
sum(set_units(st_area(tracts), km^2))
sum(set_units(st_area(tracts_lonlat), km^2))
tracts_lonlat$area_m2 <- st_area(tracts_lonlat)
tracts_lonlat$area_m2 <- st_area(tracts_lonlat)
st_length(SFhighways)
tot_length = set_units(sum(st_length(SFhighways)), km)
tot_length
emb_pow_dist = st_distance(bart_utm[bart_utm$STATION == 'EMBARCADERO',],
bart_utm[bart_utm$STATION == 'POWELL STREET',])
emb_pow_dist = set_units(emb_pow_dist, km)
emb_pow_dist
dist2emb <- st_distance(bart_utm[bart_utm$STATION == 'EMBARCADERO',],
SFhomes15_utm)
dist2emb <- set_units(dist2emb, km)
# check output
length(dist2emb)
nrow(SFhomes15_utm)
head(dist2emb, 10)
dist2emb <- set_units(st_distance(bart_utm[bart_utm$STATION == 'EMBARCADERO',],
SFhomes15_utm), km)
# check output
head(dist2emb, 10)
dist2emb <- st_distance(bart_utm[bart_utm$STATION == 'EMBARCADERO',],
SFhomes15_utm) %>% set_units(km)
# check output
head(dist2emb, 10)
tracts[1,]
sf::st_length(tracts[1,])
sf::st_length(tracts[1,'geometry'])
st_perimeter
lwgeom::st_perimeter(tracts)
lwgeom::st_perimeter(tracts[1,])
tracts[1,'geometry']
perim = lwgeom::st_perimeter(tracts)
head(perim, 10)
