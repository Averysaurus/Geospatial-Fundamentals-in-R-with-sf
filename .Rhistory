#check out its CRS
st_crs(DEM)
#or just its proj4string
proj4string(DEM)
#check out its CRS
st_crs(DEM)
#reproject tracts to our DEM projection
SFtracts_NAD = st_transform(SFtracts, st_crs(DEM))
DEM_WGS = projectRaster(DEM, projectExtent(DEM, st_crs(SFtracts)))
DEM_WGS = projectRaster(DEM, projectExtent(DEM, st_crs(SFtracts)))
?projectRaster
class(st_crs(SFtracts))
st_crs(SFtracts)$proj4string
str(st_crs(SFtracts))
str(st_crs(SFtracts))
DEM_WGS = projectRaster(DEM, projectExtent(DEM, st_crs(SFtracts)$proj4string))
DEM_WGS = projectRaster(DEM, projectExtent(DEM, st_crs(SFtracts)$proj4string))
SFtracts
st_crs(SFtracts)
st_crs(SFtracts)$proj4string
st_crs(SFtracts)$proj4string
st_crs(SFtracts)$proj4string
st_crs(SFtracts_NAD) == st_crs(DEM)
st_crs(DEM_WGS) == st_crs(SFtracts)
st_crs(DEM_WGS)
st_crs(SFtracts)
st_crs(DEM_WGS) == st_crs(SFtracts)
st_crs(DEM_WGS)$epsg == st_crs(SFtracts)$epsg
library(raster)
DEM_WGS = projectRaster(DEM, projectExtent(DEM, st_crs(SFtracts)$proj4string))
st_crs(SFtracts_NAD) == st_crs(DEM)
st_crs(DEM_WGS) == st_crs(SFtracts)
st_crs(DEM_WGS)
st_crs(SFtracts)
st_crs(DEM_WGS)$epsg == st_crs(SFtracts)$epsg
SFhomes15_sp = as_Spatial(SFhomes15_sf)
SFhomes15_sp
str(SFhomes15_sp)
plot(SFhomes15_sp)
SFhomes15_sfagain = st_as_sf(SFhomes15_sp)
plot(SFhomes15_sfagain['totvalue'])
st_crs(DEM_WGS)
plot(DEM)
# clip the WGS CRS version of the rasters to SFtracts
DEM_WGS_crop = crop(DEM_WGS, SFtracts)
# Clip the NAD CRS version
DEM_crop = crop(DEM, SFtracts_NAD)
plot(DEM_WGS_crop)
#plot together
plot(DEM_WGS_crop)
plot(st_geometry(SFtracts), add = T, col = NA)
DEM_WGS_crop_masked = mask(DEM_WGS_crop, SFtracts)
DEM_WGS_crop_masked
DEM_WGS_crop
plot(DEM_WGS_crop_masked)
plot(st_geometry(SFtracts), add = T, col = NA)
bbox?
))
?bbox
my_map <- tm_shape(DEM_WGS_crop_masked) +
tm_raster() +
tm_shape(SFtracts) +
tm_borders() +
# Set mode to interactive
tmap_mode("view")
my_map
?writeRaster
#write our reprojected, cropped data to the data directory, using the Geotiff format
#(and allow R to overwrite if file already exists)
writeRaster(DEM_WGS_crop_masked, filename="./data/DEM_reproject_crop.tif", format="GTiff", overwrite = T)
# get the elevation for every cell in each of the census tracts
elev = extract(DEM_WGS_crop, SFtracts)
#what did that give us?
head(elev)
length(elev)
nrow(SFtracts)
mean_elev = lapply(elev, mean, na.rm = T)
head(mean_elev)
unlist(mean_elev)
SFtracts$mean_elev = unlist(mean_elev)
#what did we get?
elev_map <- tm_shape(SFtracts) +
tm_polygons(col = 'mean_elev') +
tm_layout("The pain of biking in SF, by census tract",
inner.margins=c(0,0,.1,0), title.size=4.8)
elev_map
?extraxt
?extract
elev = extract(DEM_WGS_crop, SFtracts, fun=mean)
#what did that give us?
head(elev)
#read in nlcd data
nlcd = raster('./data/nlcd2011_sf.tif')
#plot nlcd
plot(nlcd)
freq(nlcd)
barplot(nlcd)
#check projection equality
st_crs(nlcd) == st_crs(SFtracts)
#reproject
nlcd_WGS = projectRaster(nlcd, projectExtent(nlcd, st_crs(SFtracts)$proj4string))
#check projection equality again
st_crs(nlcd_WGS)$epsg == st_crs(SFtracts)$epsg
#crop
nlcd_WGS_crop = crop(nlcd_WGS, SFtracts)
plot(nlcd_WGS_crop)
nlcd@legend
nlcd_WGS_crop@legend
nlcd_WGS_crop@legend = nlcd@legend
plot(nlcd_WGS_crop)
?reclassify
reclass_vec <- c(0, 20, NA, # water will be set to NA (i.e. 'left out' of our analysis)
20, 21, 1, # we'll treat developed open space as greenspace, based on NLCD description
21, 30, 0, # developed and hardscape will have 0s
30, 31, NA,
31, Inf, 1) # greensapce will have 1s
reclass_vec
reclass_m <- matrix(reclass_vec, ncol = 3, byrow = TRUE)
reclass_m
nlcd_green <- reclassify(nlcd_WGS_crop, reclass_m)
freq(nlcd_green)
barplot(nlcd_green)
plot(nlcd_green)
#extract the mean nlcd_simple values to tract polygons
greenspace = extract(nlcd_green, SFtracts, fun=mean)
greenspace
#extract the mean nlcd_simple values to tract polygons,
#this time setting na.rm to TRUE
greenspace = extract(nlcd_green, SFtracts, fun=mean, na.rm = T)
#and add to our SFtracts dataframe (which we can do because order is preserved)
SFtracts$prop_greenspace = greenspace
#aggregate totvalue to SFtracts
SFtracts_w_mean_val = aggregate(x = SFhomes15_sf['totvalue'],
by = SFtracts,
FUN = mean)
#and add the totvalue column to our SFtracts dataframe
SFtracts$mean_totvalue = SFtracts_w_mean_val$totvalue
qtm(SFtracts_w_mean_val, fill = 'totvalue')
mod = lm(mean_totvalue ~ mean_elev + prop_greenspace, data = SFtracts)
summary(mod)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = normalizePath('../'))
# Chunk 5
SFhomes <- read.csv('data/sf_properties_25ksample.csv',
stringsAsFactors = FALSE)
# Take a look at first 5 rows and a few of the columns
SFhomes[1:5,c("YearBuilt","totvalue","AreaSquareFeet","Neighborhood",
"NumBedrooms")]
# Chunk 9
plot(SFhomes$lon, SFhomes$lat, asp=1) # using base plot function
# Chunk 11
plot(SFhomes$lon, SFhomes$lat, asp=1) # using base plot function
# Chunk 12
bart <- read.csv("./data/bart.csv")
# take a look
head (bart)
# Chunk 13
SFhomes15 <- subset(SFhomes, as.numeric(SalesYear) == 2015)
# Chunk 15
plot(SFhomes$lon, SFhomes$lat, asp=1)
points(bart$X, bart$Y, col='red')
# Chunk 16
landmarks <- read.csv("./data/landmarks.csv")
head(landmarks)
# Chunk 18
plot(SFhomes$lon, SFhomes$lat, asp=1)
points(bart$X, bart$Y, col='red')
points(landmarks$X, landmarks$Y, col='green')
# Chunk 19
head(bart)
head(landmarks)
# Chunk 20
par(mfrow=c(1,2))
plot(SFhomes$lon, SFhomes$lat,
xlab="longitude",
ylab="latitude",
main="homes CRS",
asp=1)
plot(landmarks$X, landmarks$Y, col='green',
xlab="longitude",
ylab="latitude",
main="landmarks CRS",
asp=1)
par(mfrow=c(1,1))
# Chunk 21
library(sf)
# Chunk 22
dir("data", pattern = "sftracts.")
# Chunk 23
tracts = st_read(dsn = './data', layer = 'sftracts')
# Chunk 24
#the object displays a compact summary, when its name is called
tracts
# Chunk 26
class(tracts)
# Chunk 27
str(tracts)
# Chunk 28
nrow(tracts)
colnames(tracts)
head(tracts, 4)
# Chunk 30
plot(tracts)
# Chunk 31
plot(tracts)
# Chunk 32
#read in a shapefile of SF census tracts
plot(tracts['NAME'])
# Chunk 33
plot(tracts$NAME)
# Chunk 34
class(tracts['NAME'])
class(tracts[, 'NAME'])
class(subset(tracts, select='NAME'))
class(tracts$NAME)
# Chunk 35
head(tracts$NAME)
head(tracts['NAME'])
# Chunk 36
tracts$geometry
# Chunk 37
tracts$geometry
# Chunk 38
st_crs(tracts)
# Chunk 39
class(tracts$geometry)
class (tracts$geometry[[1]])
# Chunk 40
tracts
# Chunk 41
plot(sf::st_geometry(tracts))
points(SFhomes15$lon, SFhomes15$lat)
# Chunk 42
st_crs(tracts)
st_crs(SFhomes15)
# Chunk 43
st_crs(4326)
# Chunk 44
SFhomes15_sf = st_as_sf(SFhomes15, coords = c('lon', 'lat'), crs = 4326)
# Chunk 45
SFhomes15_sf
# Chunk 46
st_crs(SFhomes15_sf)
# Chunk 48
tracts_lonlat = st_transform(tracts, crs = 4326)
# Chunk 49
tracts_lonlat = st_transform(tracts, crs = st_crs(SFhomes15_sf))
# Chunk 50
st_crs(SFhomes15_sf)
st_crs(tracts_lonlat)
st_crs(SFhomes15_sf) == st_crs(tracts_lonlat)
# Chunk 52
plot(st_geometry(tracts_lonlat))
plot(st_geometry(SFhomes15_sf), add=TRUE, col='blue')
# Chunk 53
landmarks_sf = st_as_sf(landmarks, coords = c('X', 'Y'), crs = 3857)
# Chunk 54
SFboundary = st_read('./data', 'SFboundary')
SFhighways = st_read('./data', 'SFhighways')
# Chunk 55
#check the CRS of SFboundary
st_crs(SFboundary) == st_crs(SFhomes15_sf)
# Chunk 56
#check th CRS of SFhighways
st_crs(SFhighways) == st_crs(SFhomes15_sf)
#it needs to be transformed
SFhighways_lonlat = st_transform(SFhighways, st_crs(SFhomes15_sf))
# Chunk 57
landmarks_lonlat = st_transform(landmarks_sf, st_crs(SFhomes15_sf))
# Chunk 59
plot(st_geometry(SFboundary), col='white', border='purple')
plot(st_geometry(tracts_lonlat), alpha=0.2, add=T)
plot(st_geometry(SFhighways_lonlat), col='red', add=T)
plot(st_geometry(SFhomes15_sf), col='blue', pch=16, add=T)
plot(st_geometry(landmarks_lonlat), col='green', pch=16, cex=2, add=T)
# Chunk 60
library(ggplot2)
# Chunk 62
ggplot() + geom_point(data=SFhomes15, aes(x=lon, y=lat, col=totvalue))
# Chunk 63
library(tmap)
# Chunk 64
tmap_mode('plot')
# Chunk 65
qtm(SFhomes15_sf)
# Chunk 67
tmap_mode("view")
qtm(SFhomes15_sf)
# Chunk 68
ttm()
ttm()
ttm()
ttm()
ttm()
# Chunk 70
tm_shape(SFhomes15_sf) + tm_dots(col="totvalue", size = 0.25)
# Chunk 71
tm_shape(tracts) + tm_polygons(col="beige", border.col="red", alpha = 0.4)
# Chunk 72
tm_shape(SFhighways_lonlat) + tm_lines(col="black")
# Chunk 73
# Map the SF Boundary first
overlay_map = tm_shape(SFboundary) +
tm_polygons(col="beige", border.col="black") +
# Overlay the highway lines next
tm_shape(SFhighways_lonlat) +
tm_lines(col="black") +
# Then add the house points
tm_shape(SFhomes15_sf) +
tm_dots(col="totvalue", size=.25)
# Chunk 74
overlay_map
# Chunk 76
overlay_map +
tm_shape(landmarks_lonlat) +
tm_dots(col = 'skyblue', size = 2)
# Chunk 78
overlay_map +
tm_shape(landmarks_sf) +
tm_dots(col = 'skyblue', size = 2)
# Chunk 80
SFhomes15_sf_low2high <- SFhomes15_sf[order(SFhomes15_sf$totvalue, decreasing = FALSE),]
SFhomes15_sf_high2low <- SFhomes15_sf[order(SFhomes15_sf$totvalue, decreasing = TRUE),]
high2low = tm_shape(SFhomes15_sf_high2low) +
tm_dots(col='totvalue', size=1, title='Ordered high to low')
low2high = tm_shape(SFhomes15_sf_low2high) +
tm_dots(col='totvalue', size=1, title='Ordered low to high')
tmap_arrange(high2low, low2high)
# Chunk 82
tm_shape(SFboundary) +
tm_polygons(col="beige", border.col="black") +
tm_shape(SFhighways_lonlat) +
tm_lines(col="black") +
tm_shape(SFhomes15_sf) +
tm_dots(col="totvalue", size=.25,
title = "San Francisco Property Values (2015)") +
tm_layout(inner.margins=c(.05, .2, .15, .05))
# bottom, left, top, right
# Chunk 84
#set mode back to interactive
tmap_mode('view')
tm_shape(SFboundary) +
tm_polygons(col="beige", border.col="black") +
tm_shape(SFhighways_lonlat) +
tm_lines(col="black") +
tm_shape(SFhomes15_sf) +
tm_dots(col="totvalue", size=.05,
title = "San Francisco Property Values (2015)",
popup.vars=c("SalesYear","totvalue","NumBedrooms",
"NumBathrooms","AreaSquareFeet")) +
tm_layout(inner.margins=c(.05, .2, .15, .05)) # bottom, left, top, right
# Chunk 86
tmap_mode('view')
tm_basemap("Stamen.Watercolor") +
tm_shape(SFhomes15_sf) +
tm_dots(col="totvalue", size=.05, title = "San Francisco Property Values (2015)") +
tm_tiles("Stamen.TonerLabels")
# Chunk 87
fav_map <- tmap_last()
# Chunk 88
fav_map
# Chunk 91
plot(st_geometry(SFboundary), col='white', border='purple')
plot(st_geometry(tracts_lonlat), alpha=0.2, add=T)
plot(st_geometry(SFhighways_lonlat), col='red', add=T)
plot(st_geometry(SFhomes15_sf), col='blue', pch=16, add=T)
plot(st_geometry(landmarks_lonlat), col='green', pch=16, cex=2, add=T)
# Chunk 92
challenge_map_2 = tm_shape(SFboundary) +
tm_polygons(border.col = 'purple', alpha = 0) +
tm_shape(tracts_lonlat) +
tm_polygons(col = 'lightgray', border.col = 'darkgray', alpha = 0.3) +
tm_shape(SFhighways_lonlat) +
tm_lines(col = 'red') +
tm_shape(SFhomes15_sf) +
tm_dots(col = 'totvalue', size = 0.25, palette = '-Blues') +
tm_shape(landmarks_sf) +
tm_dots(col = 'green', size = 0.5)
# Chunk 93
tmap_mode('plot')
challenge_map_2 + tm_layout(inner.margins=c(.05, .2, .15, .05))
SFhomes <- read.csv('data/sf_properties_25ksample.csv',
stringsAsFactors = FALSE)
# Take a look at first 5 rows and a few of the columns
SFhomes[1:5,c("YearBuilt","totvalue","AreaSquareFeet","Neighborhood",
"NumBedrooms")]
class(SFhomes)            # what is the data object type?
dim(SFhomes)              # how many rows and columns
str(SFhomes)              # display the structure of the object
SFhomes$SupeDistrict
head(SFhomes)             # take a look at the first 10 records
summary(SFhomes)          # explore the range of values
summary(SFhomes$totvalue) # explore the range of values for one column
hist(SFhomes$totvalue)    # histogram for the totvalue column
str(SFhomes)              # display the structure of the object
head(SFhomes)             # take a look at the first 10 records
plot(SFhomes$lon, SFhomes$lat) # using base plot function
bart <- read.csv("./data/bart.csv")
# take a look
head (bart)
SFhomes15 <- subset(SFhomes, as.numeric(SalesYear) == 2015)
plot(SFhomes$lon, SFhomes$lat)
points(bart$X, bart$Y, col='red')
landmarks <- read.csv("./data/landmarks.csv")
head(landmarks)
plot(SFhomes$lon, SFhomes$lat)
points(bart$X, bart$Y, col='red')
points(landmarks$X, landmarks$Y, col='green')
par(mfrow=c(1,2))
plot(SFhomes$lon, SFhomes$lat,
xlab="longitude",
ylab="latitude",
main="homes CRS",
asp=1)
plot(landmarks$X, landmarks$Y, col='green',
xlab="longitude",
ylab="latitude",
main="landmarks CRS",
asp=1)
par(mfrow=c(1,1))
points(SFhomes$lon, SFhomes$lat, col='red')
plot(bart$X, bart$Y, asp=1)
points(SFhomes$lon, SFhomes$lat, col='red')
head(SFhomes)
library(sf)
dir("data", pattern = "sftracts.")
st_read(dsn='./data', layer='sftracts')
tracts = st_read(dsn='./data', layer='sftracts')
#the object displays a compact summary, when its name is called
tracts
class(tracts)
class(SFhomes)
str(tracts)
nrow(tracts)
colnames(tracts)
head(tracts, 4)
plot(iris)
plot(tracts)
plot(tracts$NAME)
installed.packages('dplyr')
tracts['ALAND']
plot(tracts['ALAND'])
plot(tracts$NAME)
tracts$NAME
tracts$geometry
c(1, 2, 3)
c(1, 2, '3')
c(iris, iris)
tracts$geometry
st_crs(tracts)
st_crs(tracts$geometry)
class(tracts)
class(tracts$geometry)
tracts$geometry[1]
tracts$geometry[[1]]
class(tracts$geometry[[1]])
plot(tracts)
plot(st_geometry(tracts))
points(SFhomes15$lon, SFhomes15$lat)
st_crs(tracts)
st_crs(SFhomes15)
class(SFhomes15)
st_crs(SFhomes15)
head(SFhomes15)
head(SFtracts)
head(tracts)
st_geometry
sf::st_geometry
as.numeric('4')
st_crs("+proj=longlat +ellps=WGS84 +datum=WGS84")
st_crs("+init=epsg:4326")
st_crs(4326)
st_crs(26910)
st_crs(4326)
st_crs(tracts)
SFhomes15_sf = st_as_sf(SFhomes15, coords = c('lon', 'lat'), crs = 4326)
SFhomes15
head(SFhomes15)
head(SFhomes15_sf)
st_crs(SFhomes15_sf)
?st_as_sf
SFhomes15_sf = st_as_sf(SFhomes15, coords = c('lat', 'lon'), crs = 4326)
SFhomes15_sf = st_as_sf(SFhomes15, coords = c('lon', 'lat'), crs = 4326)
SFhomes15_sf
tracts_lonlat = st_transform(tracts, crs = 4326)
tracts_lonlat = st_transform(tracts, crs = st_crs(SFhomes15_sf))
st_crs(SFhomes15_sf)
st_crs(tracts_lonlat)
st_crs(SFhomes15_sf) == st_crs(tracts_lonlat)
plot(st_geometry(tracts_lonlat))
plot(st_geometry(SFhomes15_sf), col='blue')
plot(st_geometry(SFhomes15_sf), add=T, col='blue')
plot(st_geometry(tracts_lonlat))
plot(st_geometry(SFhomes15_sf), add=T, col='blue')
plot(st_geometry(tracts_lonlat))
plot(st_geometry(SFhomes15_sf), add=T, col='blue')
landmarks_sf = st_as_sf(landmarks, coords = c('X', 'Y'), crs = 3857)
SFboundary = st_read('./data', 'SFboundary')
SFhighways = st_read('./data', 'SFhighways')
#check the CRS of SFboundary
st_crs(SFboundary) == st_crs(SFhomes15_sf)
#check th CRS of SFhighways
st_crs(SFhighways) == st_crs(SFhomes15_sf)
#it needs to be transformed
SFhighways_lonlat = st_transform(SFhighways, st_crs(SFhomes15_sf))
landmarks_lonlat = st_transform(landmarks_sf, st_crs(SFhomes15_sf))
plot(st_geometry(SFboundary), col='white', border='purple')
plot(st_geometry(tracts_lonlat), alpha=0.2, add=T)
plot(st_geometry(SFhighways_lonlat), col='red', add=T)
plot(st_geometry(SFhomes15_sf), col='blue', pch=16, add=T)
plot(st_geometry(landmarks_lonlat), col='green', pch=16, cex=2, add=T)
